<?php
/**
 * CreateOrUpdateContactRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.167
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * CreateOrUpdateContactRequest Class Doc Comment
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateOrUpdateContactRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createOrUpdateContact_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email_address' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'job_title' => 'string',
        'company_name' => 'string',
        'phone_number' => 'string',
        'list_memberships' => 'string[]',
        'custom_fields' => '\ConstantContactApi\Client\Model\CreateOrUpdateContactRequestCustomFieldsInner[]',
        'anniversary' => 'string',
        'birthday_month' => 'int',
        'birthday_day' => 'int',
        'street_address' => '\ConstantContactApi\Client\Model\CreateOrUpdateContactRequestStreetAddress',
        'sms_channel' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email_address' => null,
        'first_name' => null,
        'last_name' => null,
        'job_title' => null,
        'company_name' => null,
        'phone_number' => null,
        'list_memberships' => 'uuid',
        'custom_fields' => null,
        'anniversary' => null,
        'birthday_month' => null,
        'birthday_day' => null,
        'street_address' => null,
        'sms_channel' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'email_address' => false,
        'first_name' => false,
        'last_name' => false,
        'job_title' => false,
        'company_name' => false,
        'phone_number' => false,
        'list_memberships' => false,
        'custom_fields' => false,
        'anniversary' => false,
        'birthday_month' => false,
        'birthday_day' => false,
        'street_address' => false,
        'sms_channel' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email_address' => 'email_address',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'job_title' => 'job_title',
        'company_name' => 'company_name',
        'phone_number' => 'phone_number',
        'list_memberships' => 'list_memberships',
        'custom_fields' => 'custom_fields',
        'anniversary' => 'anniversary',
        'birthday_month' => 'birthday_month',
        'birthday_day' => 'birthday_day',
        'street_address' => 'street_address',
        'sms_channel' => 'sms_channel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email_address' => 'setEmailAddress',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'job_title' => 'setJobTitle',
        'company_name' => 'setCompanyName',
        'phone_number' => 'setPhoneNumber',
        'list_memberships' => 'setListMemberships',
        'custom_fields' => 'setCustomFields',
        'anniversary' => 'setAnniversary',
        'birthday_month' => 'setBirthdayMonth',
        'birthday_day' => 'setBirthdayDay',
        'street_address' => 'setStreetAddress',
        'sms_channel' => 'setSmsChannel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email_address' => 'getEmailAddress',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'job_title' => 'getJobTitle',
        'company_name' => 'getCompanyName',
        'phone_number' => 'getPhoneNumber',
        'list_memberships' => 'getListMemberships',
        'custom_fields' => 'getCustomFields',
        'anniversary' => 'getAnniversary',
        'birthday_month' => 'getBirthdayMonth',
        'birthday_day' => 'getBirthdayDay',
        'street_address' => 'getStreetAddress',
        'sms_channel' => 'getSmsChannel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('list_memberships', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('anniversary', $data ?? [], null);
        $this->setIfExists('birthday_month', $data ?? [], null);
        $this->setIfExists('birthday_day', $data ?? [], null);
        $this->setIfExists('street_address', $data ?? [], null);
        $this->setIfExists('sms_channel', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 50)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['job_title']) && (mb_strlen($this->container['job_title']) > 50)) {
            $invalidProperties[] = "invalid value for 'job_title', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 25)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 25.";
        }

        if ($this->container['list_memberships'] === null) {
            $invalidProperties[] = "'list_memberships' can't be null";
        }
        if ((count($this->container['list_memberships']) > 50)) {
            $invalidProperties[] = "invalid value for 'list_memberships', number of items must be less than or equal to 50.";
        }

        if ((count($this->container['list_memberships']) < 1)) {
            $invalidProperties[] = "invalid value for 'list_memberships', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['custom_fields']) && (count($this->container['custom_fields']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_fields', number of items must be less than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address The email address for the contact. This method identifies each unique contact using their email address. If the email address exists in the account, this method updates the contact. If the email address is new, this method creates a new contact.
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            throw new \InvalidArgumentException('non-nullable email_address cannot be null');
        }
        if ((mb_strlen($email_address) > 50)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling CreateOrUpdateContactRequest., must be smaller than or equal to 50.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name of the contact.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling CreateOrUpdateContactRequest., must be smaller than or equal to 50.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name of the contact.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CreateOrUpdateContactRequest., must be smaller than or equal to 50.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title The job title of the contact.
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            throw new \InvalidArgumentException('non-nullable job_title cannot be null');
        }
        if ((mb_strlen($job_title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $job_title when calling CreateOrUpdateContactRequest., must be smaller than or equal to 50.');
        }

        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name The name of the company where the contact works.
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        if ((mb_strlen($company_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling CreateOrUpdateContactRequest., must be smaller than or equal to 50.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number The phone number for the contact.
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        if ((mb_strlen($phone_number) > 25)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling CreateOrUpdateContactRequest., must be smaller than or equal to 25.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets list_memberships
     *
     * @return string[]
     */
    public function getListMemberships()
    {
        return $this->container['list_memberships'];
    }

    /**
     * Sets list_memberships
     *
     * @param string[] $list_memberships The contact lists you want to add the contact to as an array of up to 50 contact <code>list_id</code> values. You must include at least one <code>list_id</code>.
     *
     * @return self
     */
    public function setListMemberships($list_memberships)
    {
        if (is_null($list_memberships)) {
            throw new \InvalidArgumentException('non-nullable list_memberships cannot be null');
        }

        if ((count($list_memberships) > 50)) {
            throw new \InvalidArgumentException('invalid value for $list_memberships when calling CreateOrUpdateContactRequest., number of items must be less than or equal to 50.');
        }
        if ((count($list_memberships) < 1)) {
            throw new \InvalidArgumentException('invalid length for $list_memberships when calling CreateOrUpdateContactRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['list_memberships'] = $list_memberships;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \ConstantContactApi\Client\Model\CreateOrUpdateContactRequestCustomFieldsInner[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \ConstantContactApi\Client\Model\CreateOrUpdateContactRequestCustomFieldsInner[]|null $custom_fields The custom fields you want to add to the contact as an array of up to 50 custom field objects.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }

        if ((count($custom_fields) > 50)) {
            throw new \InvalidArgumentException('invalid value for $custom_fields when calling CreateOrUpdateContactRequest., number of items must be less than or equal to 50.');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets anniversary
     *
     * @return string|null
     */
    public function getAnniversary()
    {
        return $this->container['anniversary'];
    }

    /**
     * Sets anniversary
     *
     * @param string|null $anniversary The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.
     *
     * @return self
     */
    public function setAnniversary($anniversary)
    {
        if (is_null($anniversary)) {
            throw new \InvalidArgumentException('non-nullable anniversary cannot be null');
        }
        $this->container['anniversary'] = $anniversary;

        return $this;
    }

    /**
     * Gets birthday_month
     *
     * @return int|null
     */
    public function getBirthdayMonth()
    {
        return $this->container['birthday_month'];
    }

    /**
     * Sets birthday_month
     *
     * @param int|null $birthday_month The month value for the contact's birthday. Valid values are from 1 through 12. The <code>birthday_month</code> property is required if you use <code>birthday_day</code>.
     *
     * @return self
     */
    public function setBirthdayMonth($birthday_month)
    {
        if (is_null($birthday_month)) {
            throw new \InvalidArgumentException('non-nullable birthday_month cannot be null');
        }
        $this->container['birthday_month'] = $birthday_month;

        return $this;
    }

    /**
     * Gets birthday_day
     *
     * @return int|null
     */
    public function getBirthdayDay()
    {
        return $this->container['birthday_day'];
    }

    /**
     * Sets birthday_day
     *
     * @param int|null $birthday_day The day value for the contact's birthday. Valid values are from 1 through 31. The <code>birthday_day</code> property is required if you use <code>birthday_month</code>.
     *
     * @return self
     */
    public function setBirthdayDay($birthday_day)
    {
        if (is_null($birthday_day)) {
            throw new \InvalidArgumentException('non-nullable birthday_day cannot be null');
        }
        $this->container['birthday_day'] = $birthday_day;

        return $this;
    }

    /**
     * Gets street_address
     *
     * @return \ConstantContactApi\Client\Model\CreateOrUpdateContactRequestStreetAddress|null
     */
    public function getStreetAddress()
    {
        return $this->container['street_address'];
    }

    /**
     * Sets street_address
     *
     * @param \ConstantContactApi\Client\Model\CreateOrUpdateContactRequestStreetAddress|null $street_address street_address
     *
     * @return self
     */
    public function setStreetAddress($street_address)
    {
        if (is_null($street_address)) {
            throw new \InvalidArgumentException('non-nullable street_address cannot be null');
        }
        $this->container['street_address'] = $street_address;

        return $this;
    }

    /**
     * Gets sms_channel
     *
     * @return string|null
     */
    public function getSmsChannel()
    {
        return $this->container['sms_channel'];
    }

    /**
     * Sets sms_channel
     *
     * @param string|null $sms_channel The contact's SMS compatible phone number.
     *
     * @return self
     */
    public function setSmsChannel($sms_channel)
    {
        if (is_null($sms_channel)) {
            throw new \InvalidArgumentException('non-nullable sms_channel cannot be null');
        }
        $this->container['sms_channel'] = $sms_channel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


