<?php
/**
 * PartnerAccountOperationsRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.170
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * PartnerAccountOperationsRequest Class Doc Comment
 *
 * @category Class
 * @description JSON object that contains the fields Constant Contact uses to construct the HTTP request you are sending on behalf of a managed account.
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PartnerAccountOperationsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PartnerAccountOperationsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_operation_url' => 'string',
        'account_operation_method' => 'string',
        'account_operation_payload' => 'string',
        'account_operation_query_parameters' => '\ConstantContactApi\Client\Model\PartnerAccountOperationsRequestAccountOperationQueryParametersInner[]',
        'account_operation_path_parameters' => '\ConstantContactApi\Client\Model\PartnerAccountOperationsRequestAccountOperationPathParametersInner[]',
        'account_operation_headers' => '\ConstantContactApi\Client\Model\PartnerAccountOperationsRequestAccountOperationHeadersInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_operation_url' => null,
        'account_operation_method' => null,
        'account_operation_payload' => null,
        'account_operation_query_parameters' => null,
        'account_operation_path_parameters' => null,
        'account_operation_headers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_operation_url' => false,
        'account_operation_method' => false,
        'account_operation_payload' => false,
        'account_operation_query_parameters' => false,
        'account_operation_path_parameters' => false,
        'account_operation_headers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_operation_url' => 'account_operation_url',
        'account_operation_method' => 'account_operation_method',
        'account_operation_payload' => 'account_operation_payload',
        'account_operation_query_parameters' => 'account_operation_query_parameters',
        'account_operation_path_parameters' => 'account_operation_path_parameters',
        'account_operation_headers' => 'account_operation_headers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_operation_url' => 'setAccountOperationUrl',
        'account_operation_method' => 'setAccountOperationMethod',
        'account_operation_payload' => 'setAccountOperationPayload',
        'account_operation_query_parameters' => 'setAccountOperationQueryParameters',
        'account_operation_path_parameters' => 'setAccountOperationPathParameters',
        'account_operation_headers' => 'setAccountOperationHeaders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_operation_url' => 'getAccountOperationUrl',
        'account_operation_method' => 'getAccountOperationMethod',
        'account_operation_payload' => 'getAccountOperationPayload',
        'account_operation_query_parameters' => 'getAccountOperationQueryParameters',
        'account_operation_path_parameters' => 'getAccountOperationPathParameters',
        'account_operation_headers' => 'getAccountOperationHeaders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_operation_url', $data ?? [], null);
        $this->setIfExists('account_operation_method', $data ?? [], null);
        $this->setIfExists('account_operation_payload', $data ?? [], null);
        $this->setIfExists('account_operation_query_parameters', $data ?? [], null);
        $this->setIfExists('account_operation_path_parameters', $data ?? [], null);
        $this->setIfExists('account_operation_headers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_operation_url'] === null) {
            $invalidProperties[] = "'account_operation_url' can't be null";
        }
        if ($this->container['account_operation_method'] === null) {
            $invalidProperties[] = "'account_operation_method' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_operation_url
     *
     * @return string
     */
    public function getAccountOperationUrl()
    {
        return $this->container['account_operation_url'];
    }

    /**
     * Sets account_operation_url
     *
     * @param string $account_operation_url The API method path for the request you are sending on behalf of a managed child account. This value should be a V3 API URL without the https://api.cc.email/v3 base url and with any path parameter names included. For example: <code>/emails/activities/{campaign_activity_id}</code>.
     *
     * @return self
     */
    public function setAccountOperationUrl($account_operation_url)
    {
        if (is_null($account_operation_url)) {
            throw new \InvalidArgumentException('non-nullable account_operation_url cannot be null');
        }
        $this->container['account_operation_url'] = $account_operation_url;

        return $this;
    }

    /**
     * Gets account_operation_method
     *
     * @return string
     */
    public function getAccountOperationMethod()
    {
        return $this->container['account_operation_method'];
    }

    /**
     * Sets account_operation_method
     *
     * @param string $account_operation_method The http method for the request you are sending on behalf of a managed child account.
     *
     * @return self
     */
    public function setAccountOperationMethod($account_operation_method)
    {
        if (is_null($account_operation_method)) {
            throw new \InvalidArgumentException('non-nullable account_operation_method cannot be null');
        }
        $this->container['account_operation_method'] = $account_operation_method;

        return $this;
    }

    /**
     * Gets account_operation_payload
     *
     * @return string|null
     */
    public function getAccountOperationPayload()
    {
        return $this->container['account_operation_payload'];
    }

    /**
     * Sets account_operation_payload
     *
     * @param string|null $account_operation_payload The request payload for the request you are sending on behalf of a managed child account. If you provide a JSON payload using this parameter, make sure that the JSON is string escaped.
     *
     * @return self
     */
    public function setAccountOperationPayload($account_operation_payload)
    {
        if (is_null($account_operation_payload)) {
            throw new \InvalidArgumentException('non-nullable account_operation_payload cannot be null');
        }
        $this->container['account_operation_payload'] = $account_operation_payload;

        return $this;
    }

    /**
     * Gets account_operation_query_parameters
     *
     * @return \ConstantContactApi\Client\Model\PartnerAccountOperationsRequestAccountOperationQueryParametersInner[]|null
     */
    public function getAccountOperationQueryParameters()
    {
        return $this->container['account_operation_query_parameters'];
    }

    /**
     * Sets account_operation_query_parameters
     *
     * @param \ConstantContactApi\Client\Model\PartnerAccountOperationsRequestAccountOperationQueryParametersInner[]|null $account_operation_query_parameters An array containing the query parameters for the request you are sending on behalf of a managed child account.
     *
     * @return self
     */
    public function setAccountOperationQueryParameters($account_operation_query_parameters)
    {
        if (is_null($account_operation_query_parameters)) {
            throw new \InvalidArgumentException('non-nullable account_operation_query_parameters cannot be null');
        }
        $this->container['account_operation_query_parameters'] = $account_operation_query_parameters;

        return $this;
    }

    /**
     * Gets account_operation_path_parameters
     *
     * @return \ConstantContactApi\Client\Model\PartnerAccountOperationsRequestAccountOperationPathParametersInner[]|null
     */
    public function getAccountOperationPathParameters()
    {
        return $this->container['account_operation_path_parameters'];
    }

    /**
     * Sets account_operation_path_parameters
     *
     * @param \ConstantContactApi\Client\Model\PartnerAccountOperationsRequestAccountOperationPathParametersInner[]|null $account_operation_path_parameters An array containing the path parameters for the request you are sending on behalf of a managed child account.
     *
     * @return self
     */
    public function setAccountOperationPathParameters($account_operation_path_parameters)
    {
        if (is_null($account_operation_path_parameters)) {
            throw new \InvalidArgumentException('non-nullable account_operation_path_parameters cannot be null');
        }
        $this->container['account_operation_path_parameters'] = $account_operation_path_parameters;

        return $this;
    }

    /**
     * Gets account_operation_headers
     *
     * @return \ConstantContactApi\Client\Model\PartnerAccountOperationsRequestAccountOperationHeadersInner[]|null
     */
    public function getAccountOperationHeaders()
    {
        return $this->container['account_operation_headers'];
    }

    /**
     * Sets account_operation_headers
     *
     * @param \ConstantContactApi\Client\Model\PartnerAccountOperationsRequestAccountOperationHeadersInner[]|null $account_operation_headers An array containing the headers for the request you are sending on behalf of a managed child account.
     *
     * @return self
     */
    public function setAccountOperationHeaders($account_operation_headers)
    {
        if (is_null($account_operation_headers)) {
            throw new \InvalidArgumentException('non-nullable account_operation_headers cannot be null');
        }
        $this->container['account_operation_headers'] = $account_operation_headers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


