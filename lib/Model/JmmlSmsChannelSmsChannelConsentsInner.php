<?php
/**
 * JmmlSmsChannelSmsChannelConsentsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.168
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * JmmlSmsChannelSmsChannelConsentsInner Class Doc Comment
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class JmmlSmsChannelSmsChannelConsentsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JmmlSmsChannel_sms_channel_consents_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sms_consent_permission' => 'string',
        'consent_type' => 'string',
        'consent_medium_type' => 'string',
        'consent_medium_url' => 'string',
        'consent_medium_details' => 'string',
        'advertised_frequency' => 'int',
        'advertised_interval' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sms_consent_permission' => null,
        'consent_type' => null,
        'consent_medium_type' => null,
        'consent_medium_url' => null,
        'consent_medium_details' => null,
        'advertised_frequency' => null,
        'advertised_interval' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sms_consent_permission' => false,
        'consent_type' => false,
        'consent_medium_type' => false,
        'consent_medium_url' => false,
        'consent_medium_details' => false,
        'advertised_frequency' => false,
        'advertised_interval' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sms_consent_permission' => 'sms_consent_permission',
        'consent_type' => 'consent_type',
        'consent_medium_type' => 'consent_medium_type',
        'consent_medium_url' => 'consent_medium_url',
        'consent_medium_details' => 'consent_medium_details',
        'advertised_frequency' => 'advertised_frequency',
        'advertised_interval' => 'advertised_interval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sms_consent_permission' => 'setSmsConsentPermission',
        'consent_type' => 'setConsentType',
        'consent_medium_type' => 'setConsentMediumType',
        'consent_medium_url' => 'setConsentMediumUrl',
        'consent_medium_details' => 'setConsentMediumDetails',
        'advertised_frequency' => 'setAdvertisedFrequency',
        'advertised_interval' => 'setAdvertisedInterval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sms_consent_permission' => 'getSmsConsentPermission',
        'consent_type' => 'getConsentType',
        'consent_medium_type' => 'getConsentMediumType',
        'consent_medium_url' => 'getConsentMediumUrl',
        'consent_medium_details' => 'getConsentMediumDetails',
        'advertised_frequency' => 'getAdvertisedFrequency',
        'advertised_interval' => 'getAdvertisedInterval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sms_consent_permission', $data ?? [], null);
        $this->setIfExists('consent_type', $data ?? [], null);
        $this->setIfExists('consent_medium_type', $data ?? [], null);
        $this->setIfExists('consent_medium_url', $data ?? [], null);
        $this->setIfExists('consent_medium_details', $data ?? [], null);
        $this->setIfExists('advertised_frequency', $data ?? [], null);
        $this->setIfExists('advertised_interval', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sms_consent_permission'] === null) {
            $invalidProperties[] = "'sms_consent_permission' can't be null";
        }
        if ($this->container['consent_type'] === null) {
            $invalidProperties[] = "'consent_type' can't be null";
        }
        if ($this->container['consent_medium_type'] === null) {
            $invalidProperties[] = "'consent_medium_type' can't be null";
        }
        if ($this->container['consent_medium_url'] === null) {
            $invalidProperties[] = "'consent_medium_url' can't be null";
        }
        if ($this->container['consent_medium_details'] === null) {
            $invalidProperties[] = "'consent_medium_details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sms_consent_permission
     *
     * @return string
     */
    public function getSmsConsentPermission()
    {
        return $this->container['sms_consent_permission'];
    }

    /**
     * Sets sms_consent_permission
     *
     * @param string $sms_consent_permission The current consent status of the SMS Channel.
     *
     * @return self
     */
    public function setSmsConsentPermission($sms_consent_permission)
    {
        if (is_null($sms_consent_permission)) {
            throw new \InvalidArgumentException('non-nullable sms_consent_permission cannot be null');
        }
        $this->container['sms_consent_permission'] = $sms_consent_permission;

        return $this;
    }

    /**
     * Gets consent_type
     *
     * @return string
     */
    public function getConsentType()
    {
        return $this->container['consent_type'];
    }

    /**
     * Sets consent_type
     *
     * @param string $consent_type The type of consent provided.
     *
     * @return self
     */
    public function setConsentType($consent_type)
    {
        if (is_null($consent_type)) {
            throw new \InvalidArgumentException('non-nullable consent_type cannot be null');
        }
        $this->container['consent_type'] = $consent_type;

        return $this;
    }

    /**
     * Gets consent_medium_type
     *
     * @return string
     */
    public function getConsentMediumType()
    {
        return $this->container['consent_medium_type'];
    }

    /**
     * Sets consent_medium_type
     *
     * @param string $consent_medium_type A code representing where the consent was retrieved.
     *
     * @return self
     */
    public function setConsentMediumType($consent_medium_type)
    {
        if (is_null($consent_medium_type)) {
            throw new \InvalidArgumentException('non-nullable consent_medium_type cannot be null');
        }
        $this->container['consent_medium_type'] = $consent_medium_type;

        return $this;
    }

    /**
     * Gets consent_medium_url
     *
     * @return string
     */
    public function getConsentMediumUrl()
    {
        return $this->container['consent_medium_url'];
    }

    /**
     * Sets consent_medium_url
     *
     * @param string $consent_medium_url The URL for which the consent was gathered, such as a landing page.
     *
     * @return self
     */
    public function setConsentMediumUrl($consent_medium_url)
    {
        if (is_null($consent_medium_url)) {
            throw new \InvalidArgumentException('non-nullable consent_medium_url cannot be null');
        }
        $this->container['consent_medium_url'] = $consent_medium_url;

        return $this;
    }

    /**
     * Gets consent_medium_details
     *
     * @return string
     */
    public function getConsentMediumDetails()
    {
        return $this->container['consent_medium_details'];
    }

    /**
     * Sets consent_medium_details
     *
     * @param string $consent_medium_details Additional information for the consent
     *
     * @return self
     */
    public function setConsentMediumDetails($consent_medium_details)
    {
        if (is_null($consent_medium_details)) {
            throw new \InvalidArgumentException('non-nullable consent_medium_details cannot be null');
        }
        $this->container['consent_medium_details'] = $consent_medium_details;

        return $this;
    }

    /**
     * Gets advertised_frequency
     *
     * @return int|null
     */
    public function getAdvertisedFrequency()
    {
        return $this->container['advertised_frequency'];
    }

    /**
     * Sets advertised_frequency
     *
     * @param int|null $advertised_frequency The numeric component used to indicate how often to send advertising. For example, <code>1</code> indicates once. Use with <code>advertised_internal</code> property to indicate when on the calender to send it. For example, to send once (<code>1</code>) daily, weekly, or monthly.
     *
     * @return self
     */
    public function setAdvertisedFrequency($advertised_frequency)
    {
        if (is_null($advertised_frequency)) {
            throw new \InvalidArgumentException('non-nullable advertised_frequency cannot be null');
        }
        $this->container['advertised_frequency'] = $advertised_frequency;

        return $this;
    }

    /**
     * Gets advertised_interval
     *
     * @return string|null
     */
    public function getAdvertisedInterval()
    {
        return $this->container['advertised_interval'];
    }

    /**
     * Sets advertised_interval
     *
     * @param string|null $advertised_interval The calender interval used to indicate when advertising is sent. For example <code>weekly</code>.
     *
     * @return self
     */
    public function setAdvertisedInterval($advertised_interval)
    {
        if (is_null($advertised_interval)) {
            throw new \InvalidArgumentException('non-nullable advertised_interval cannot be null');
        }
        $this->container['advertised_interval'] = $advertised_interval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


