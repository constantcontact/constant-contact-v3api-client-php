<?php
/**
 * HistoryDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.169
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * HistoryDetails Class Doc Comment
 *
 * @category Class
 * @description Additional details about the SMS consent actions (opt-in, opt-out) in JSON format. The  &lt;code&gt;consent_action_type&lt;/code&gt; and the method used to add or update a contacts SMS details determines which properties are returned in the results.
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HistoryDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HistoryDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'state' => 'string',
        'source' => 'string',
        'consent_type' => 'string',
        'consent_action_time' => '\DateTime',
        'consent_action_type' => 'string',
        'consent_medium_type' => 'string',
        'source_consent_timestamp' => 'string',
        'source_sms_number' => 'string',
        'advertised_frequency' => 'int',
        'advertised_interval' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'state' => null,
        'source' => null,
        'consent_type' => null,
        'consent_action_time' => 'date-time',
        'consent_action_type' => null,
        'consent_medium_type' => null,
        'source_consent_timestamp' => null,
        'source_sms_number' => null,
        'advertised_frequency' => null,
        'advertised_interval' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'state' => false,
        'source' => false,
        'consent_type' => false,
        'consent_action_time' => false,
        'consent_action_type' => false,
        'consent_medium_type' => false,
        'source_consent_timestamp' => false,
        'source_sms_number' => false,
        'advertised_frequency' => false,
        'advertised_interval' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'state' => 'state',
        'source' => 'source',
        'consent_type' => 'consent_type',
        'consent_action_time' => 'consent_action_time',
        'consent_action_type' => 'consent_action_type',
        'consent_medium_type' => 'consent_medium_type',
        'source_consent_timestamp' => 'source_consent_timestamp',
        'source_sms_number' => 'source_sms_number',
        'advertised_frequency' => 'advertised_frequency',
        'advertised_interval' => 'advertised_interval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'state' => 'setState',
        'source' => 'setSource',
        'consent_type' => 'setConsentType',
        'consent_action_time' => 'setConsentActionTime',
        'consent_action_type' => 'setConsentActionType',
        'consent_medium_type' => 'setConsentMediumType',
        'source_consent_timestamp' => 'setSourceConsentTimestamp',
        'source_sms_number' => 'setSourceSmsNumber',
        'advertised_frequency' => 'setAdvertisedFrequency',
        'advertised_interval' => 'setAdvertisedInterval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'state' => 'getState',
        'source' => 'getSource',
        'consent_type' => 'getConsentType',
        'consent_action_time' => 'getConsentActionTime',
        'consent_action_type' => 'getConsentActionType',
        'consent_medium_type' => 'getConsentMediumType',
        'source_consent_timestamp' => 'getSourceConsentTimestamp',
        'source_sms_number' => 'getSourceSmsNumber',
        'advertised_frequency' => 'getAdvertisedFrequency',
        'advertised_interval' => 'getAdvertisedInterval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('consent_type', $data ?? [], null);
        $this->setIfExists('consent_action_time', $data ?? [], null);
        $this->setIfExists('consent_action_type', $data ?? [], null);
        $this->setIfExists('consent_medium_type', $data ?? [], null);
        $this->setIfExists('source_consent_timestamp', $data ?? [], null);
        $this->setIfExists('source_sms_number', $data ?? [], null);
        $this->setIfExists('advertised_frequency', $data ?? [], null);
        $this->setIfExists('advertised_interval', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The code representing the consent state, including <code>E</code> for optin and <code>O</code> for Optin.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source The code representing the consent source type, including <code>A</code> for Account, <code>C</code> for Contact, and <code>S</code>' for System.
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets consent_type
     *
     * @return string|null
     */
    public function getConsentType()
    {
        return $this->container['consent_type'];
    }

    /**
     * Sets consent_type
     *
     * @param string|null $consent_type The type of SMS consent used.
     *
     * @return self
     */
    public function setConsentType($consent_type)
    {
        if (is_null($consent_type)) {
            throw new \InvalidArgumentException('non-nullable consent_type cannot be null');
        }
        $this->container['consent_type'] = $consent_type;

        return $this;
    }

    /**
     * Gets consent_action_time
     *
     * @return \DateTime|null
     */
    public function getConsentActionTime()
    {
        return $this->container['consent_action_time'];
    }

    /**
     * Sets consent_action_time
     *
     * @param \DateTime|null $consent_action_time The date and time that SMS engagement data was last updated, in ISO-8601 format. System generated.
     *
     * @return self
     */
    public function setConsentActionTime($consent_action_time)
    {
        if (is_null($consent_action_time)) {
            throw new \InvalidArgumentException('non-nullable consent_action_time cannot be null');
        }
        $this->container['consent_action_time'] = $consent_action_time;

        return $this;
    }

    /**
     * Gets consent_action_type
     *
     * @return string|null
     */
    public function getConsentActionType()
    {
        return $this->container['consent_action_type'];
    }

    /**
     * Sets consent_action_type
     *
     * @param string|null $consent_action_type The type of consent action provided.
     *
     * @return self
     */
    public function setConsentActionType($consent_action_type)
    {
        if (is_null($consent_action_type)) {
            throw new \InvalidArgumentException('non-nullable consent_action_type cannot be null');
        }
        $this->container['consent_action_type'] = $consent_action_type;

        return $this;
    }

    /**
     * Gets consent_medium_type
     *
     * @return string|null
     */
    public function getConsentMediumType()
    {
        return $this->container['consent_medium_type'];
    }

    /**
     * Sets consent_medium_type
     *
     * @param string|null $consent_medium_type The code representing the medium used to provide consent. Medium types include mobile device (<code>MD</code>). lead generation form(<code>LF</code>), deactivation by carrier(<code>CD</code>), import_file:(<code>FI</code>), and system (<code>SY</code>).
     *
     * @return self
     */
    public function setConsentMediumType($consent_medium_type)
    {
        if (is_null($consent_medium_type)) {
            throw new \InvalidArgumentException('non-nullable consent_medium_type cannot be null');
        }
        $this->container['consent_medium_type'] = $consent_medium_type;

        return $this;
    }

    /**
     * Gets source_consent_timestamp
     *
     * @return string|null
     */
    public function getSourceConsentTimestamp()
    {
        return $this->container['source_consent_timestamp'];
    }

    /**
     * Sets source_consent_timestamp
     *
     * @param string|null $source_consent_timestamp The time that SMS consent was last updated.
     *
     * @return self
     */
    public function setSourceConsentTimestamp($source_consent_timestamp)
    {
        if (is_null($source_consent_timestamp)) {
            throw new \InvalidArgumentException('non-nullable source_consent_timestamp cannot be null');
        }
        $this->container['source_consent_timestamp'] = $source_consent_timestamp;

        return $this;
    }

    /**
     * Gets source_sms_number
     *
     * @return string|null
     */
    public function getSourceSmsNumber()
    {
        return $this->container['source_sms_number'];
    }

    /**
     * Sets source_sms_number
     *
     * @param string|null $source_sms_number If applicable, the SMS consent number associated with the source.
     *
     * @return self
     */
    public function setSourceSmsNumber($source_sms_number)
    {
        if (is_null($source_sms_number)) {
            throw new \InvalidArgumentException('non-nullable source_sms_number cannot be null');
        }
        $this->container['source_sms_number'] = $source_sms_number;

        return $this;
    }

    /**
     * Gets advertised_frequency
     *
     * @return int|null
     */
    public function getAdvertisedFrequency()
    {
        return $this->container['advertised_frequency'];
    }

    /**
     * Sets advertised_frequency
     *
     * @param int|null $advertised_frequency If applicable, the advertising numeric component used to advertise to the contact.. For example, if <code>advertised_frequency</code> is set to <code> 2</code> , and  <code>advertised_interval</code> is set to <code>M</code>, the contact receives advertisements twice a month.
     *
     * @return self
     */
    public function setAdvertisedFrequency($advertised_frequency)
    {
        if (is_null($advertised_frequency)) {
            throw new \InvalidArgumentException('non-nullable advertised_frequency cannot be null');
        }
        $this->container['advertised_frequency'] = $advertised_frequency;

        return $this;
    }

    /**
     * Gets advertised_interval
     *
     * @return string|null
     */
    public function getAdvertisedInterval()
    {
        return $this->container['advertised_interval'];
    }

    /**
     * Sets advertised_interval
     *
     * @param string|null $advertised_interval If applicable, the interval component used to advertise to the contact. For example, if <code>advertised_frequency</code> is set to <code> 2</code> , and  <code>advertised_interval</code> is set to <code>M</code>, the contact receives advertisements twice a month.
     *
     * @return self
     */
    public function setAdvertisedInterval($advertised_interval)
    {
        if (is_null($advertised_interval)) {
            throw new \InvalidArgumentException('non-nullable advertised_interval cannot be null');
        }
        $this->container['advertised_interval'] = $advertised_interval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


