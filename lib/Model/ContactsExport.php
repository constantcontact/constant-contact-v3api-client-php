<?php
/**
 * ContactsExport
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.170
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * ContactsExport Class Doc Comment
 *
 * @category Class
 * @description Export contact objects to a CSV file. By default, all contacts in the user&#39;s account are exported unless a filtering parameter is specified.
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContactsExport implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContactsExport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contact_ids' => 'string[]',
        'list_ids' => 'string[]',
        'tag_ids' => 'string[]',
        'new_subscriber' => 'bool',
        'segment_id' => 'int',
        'fields' => 'string[]',
        'status' => 'string',
        'exclude' => '\ConstantContactApi\Client\Model\CreateExportActivityRequestExclude'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contact_ids' => 'uuid',
        'list_ids' => 'uuid',
        'tag_ids' => 'uuid',
        'new_subscriber' => null,
        'segment_id' => null,
        'fields' => null,
        'status' => null,
        'exclude' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contact_ids' => false,
        'list_ids' => false,
        'tag_ids' => false,
        'new_subscriber' => false,
        'segment_id' => false,
        'fields' => false,
        'status' => false,
        'exclude' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_ids' => 'contact_ids',
        'list_ids' => 'list_ids',
        'tag_ids' => 'tag_ids',
        'new_subscriber' => 'new_subscriber',
        'segment_id' => 'segment_id',
        'fields' => 'fields',
        'status' => 'status',
        'exclude' => 'exclude'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_ids' => 'setContactIds',
        'list_ids' => 'setListIds',
        'tag_ids' => 'setTagIds',
        'new_subscriber' => 'setNewSubscriber',
        'segment_id' => 'setSegmentId',
        'fields' => 'setFields',
        'status' => 'setStatus',
        'exclude' => 'setExclude'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_ids' => 'getContactIds',
        'list_ids' => 'getListIds',
        'tag_ids' => 'getTagIds',
        'new_subscriber' => 'getNewSubscriber',
        'segment_id' => 'getSegmentId',
        'fields' => 'getFields',
        'status' => 'getStatus',
        'exclude' => 'getExclude'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contact_ids', $data ?? [], null);
        $this->setIfExists('list_ids', $data ?? [], null);
        $this->setIfExists('tag_ids', $data ?? [], null);
        $this->setIfExists('new_subscriber', $data ?? [], null);
        $this->setIfExists('segment_id', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('exclude', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['contact_ids']) && (count($this->container['contact_ids']) > 500)) {
            $invalidProperties[] = "invalid value for 'contact_ids', number of items must be less than or equal to 500.";
        }

        if (!is_null($this->container['list_ids']) && (count($this->container['list_ids']) > 50)) {
            $invalidProperties[] = "invalid value for 'list_ids', number of items must be less than or equal to 50.";
        }

        if (!is_null($this->container['tag_ids']) && (count($this->container['tag_ids']) > 50)) {
            $invalidProperties[] = "invalid value for 'tag_ids', number of items must be less than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contact_ids
     *
     * @return string[]|null
     */
    public function getContactIds()
    {
        return $this->container['contact_ids'];
    }

    /**
     * Sets contact_ids
     *
     * @param string[]|null $contact_ids Exports up to 500 specific contacts.  This property is mutually exclusive with all other filtering criteria except with<code>status</code>.
     *
     * @return self
     */
    public function setContactIds($contact_ids)
    {
        if (is_null($contact_ids)) {
            throw new \InvalidArgumentException('non-nullable contact_ids cannot be null');
        }

        if ((count($contact_ids) > 500)) {
            throw new \InvalidArgumentException('invalid value for $contact_ids when calling ContactsExport., number of items must be less than or equal to 500.');
        }
        $this->container['contact_ids'] = $contact_ids;

        return $this;
    }

    /**
     * Gets list_ids
     *
     * @return string[]|null
     */
    public function getListIds()
    {
        return $this->container['list_ids'];
    }

    /**
     * Sets list_ids
     *
     * @param string[]|null $list_ids Exports all of the contacts inside of up to 50 contact lists. This property is mutually exclusive with all other filtering criteria except with either <code>status</code> or <code>exclude</code>.
     *
     * @return self
     */
    public function setListIds($list_ids)
    {
        if (is_null($list_ids)) {
            throw new \InvalidArgumentException('non-nullable list_ids cannot be null');
        }

        if ((count($list_ids) > 50)) {
            throw new \InvalidArgumentException('invalid value for $list_ids when calling ContactsExport., number of items must be less than or equal to 50.');
        }
        $this->container['list_ids'] = $list_ids;

        return $this;
    }

    /**
     * Gets tag_ids
     *
     * @return string[]|null
     */
    public function getTagIds()
    {
        return $this->container['tag_ids'];
    }

    /**
     * Sets tag_ids
     *
     * @param string[]|null $tag_ids Exports contacts assigned one or more of the tags (<code>tag_id</code>) specified. This property is mutually exclusive with all other filtering criteria.
     *
     * @return self
     */
    public function setTagIds($tag_ids)
    {
        if (is_null($tag_ids)) {
            throw new \InvalidArgumentException('non-nullable tag_ids cannot be null');
        }

        if ((count($tag_ids) > 50)) {
            throw new \InvalidArgumentException('invalid value for $tag_ids when calling ContactsExport., number of items must be less than or equal to 50.');
        }
        $this->container['tag_ids'] = $tag_ids;

        return $this;
    }

    /**
     * Gets new_subscriber
     *
     * @return bool|null
     */
    public function getNewSubscriber()
    {
        return $this->container['new_subscriber'];
    }

    /**
     * Sets new_subscriber
     *
     * @param bool|null $new_subscriber Set to <code>true</code> to only export contacts that subscribed within the last 30 days. Default setting is <code>false</code>. This property is mutually exclusive with all other filtering criteria except  with either  <code>list_ids</code> or <code>exclude</code>.
     *
     * @return self
     */
    public function setNewSubscriber($new_subscriber)
    {
        if (is_null($new_subscriber)) {
            throw new \InvalidArgumentException('non-nullable new_subscriber cannot be null');
        }
        $this->container['new_subscriber'] = $new_subscriber;

        return $this;
    }

    /**
     * Gets segment_id
     *
     * @return int|null
     */
    public function getSegmentId()
    {
        return $this->container['segment_id'];
    }

    /**
     * Sets segment_id
     *
     * @param int|null $segment_id Specify the <code>segment_id</code> from which you want to export all contacts that meet the specified <code>segment_criteria</code>. You can only specify one <code>segment_id</code>. This property is mutually exclusive with all other filtering criteria.
     *
     * @return self
     */
    public function setSegmentId($segment_id)
    {
        if (is_null($segment_id)) {
            throw new \InvalidArgumentException('non-nullable segment_id cannot be null');
        }
        $this->container['segment_id'] = $segment_id;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return string[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string[]|null $fields By default , all fields are returned. Use this array to only export specific contact fields. You must export <code>email_address</code> to successfully export <code>email_optin_source</code>, <code>email_optin_date</code>, <code>email_optout_source</code>, <code>email_optout_date</code>, or <code>email_optout_reason</code>.
     *
     * @return self
     */
    public function setFields($fields)
    {
        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Allows you to export only contacts that have a specific status value. This property is mutually exclusive with all other filtering criteria except with either  <code>contact_ids</code> or <code>list_ids</code>.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets exclude
     *
     * @return \ConstantContactApi\Client\Model\CreateExportActivityRequestExclude|null
     */
    public function getExclude()
    {
        return $this->container['exclude'];
    }

    /**
     * Sets exclude
     *
     * @param \ConstantContactApi\Client\Model\CreateExportActivityRequestExclude|null $exclude exclude
     *
     * @return self
     */
    public function setExclude($exclude)
    {
        if (is_null($exclude)) {
            throw new \InvalidArgumentException('non-nullable exclude cannot be null');
        }
        $this->container['exclude'] = $exclude;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


