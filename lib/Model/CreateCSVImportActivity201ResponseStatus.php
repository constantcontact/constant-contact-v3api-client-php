<?php
/**
 * CreateCSVImportActivity201ResponseStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.179
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * CreateCSVImportActivity201ResponseStatus Class Doc Comment
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateCSVImportActivity201ResponseStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createCSVImportActivity_201_response_status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'items_total_count' => 'int',
        'person_count' => 'int',
        'error_count' => 'int',
        'correctable_count' => 'int',
        'cannot_add_to_list_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'items_total_count' => null,
        'person_count' => null,
        'error_count' => null,
        'correctable_count' => null,
        'cannot_add_to_list_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'items_total_count' => false,
        'person_count' => false,
        'error_count' => false,
        'correctable_count' => false,
        'cannot_add_to_list_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'items_total_count' => 'items_total_count',
        'person_count' => 'person_count',
        'error_count' => 'error_count',
        'correctable_count' => 'correctable_count',
        'cannot_add_to_list_count' => 'cannot_add_to_list_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'items_total_count' => 'setItemsTotalCount',
        'person_count' => 'setPersonCount',
        'error_count' => 'setErrorCount',
        'correctable_count' => 'setCorrectableCount',
        'cannot_add_to_list_count' => 'setCannotAddToListCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'items_total_count' => 'getItemsTotalCount',
        'person_count' => 'getPersonCount',
        'error_count' => 'getErrorCount',
        'correctable_count' => 'getCorrectableCount',
        'cannot_add_to_list_count' => 'getCannotAddToListCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('items_total_count', $data ?? [], null);
        $this->setIfExists('person_count', $data ?? [], null);
        $this->setIfExists('error_count', $data ?? [], null);
        $this->setIfExists('correctable_count', $data ?? [], null);
        $this->setIfExists('cannot_add_to_list_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets items_total_count
     *
     * @return int|null
     */
    public function getItemsTotalCount()
    {
        return $this->container['items_total_count'];
    }

    /**
     * Sets items_total_count
     *
     * @param int|null $items_total_count The total number of rows, including the header row, in the import file.
     *
     * @return self
     */
    public function setItemsTotalCount($items_total_count)
    {
        if (is_null($items_total_count)) {
            throw new \InvalidArgumentException('non-nullable items_total_count cannot be null');
        }
        $this->container['items_total_count'] = $items_total_count;

        return $this;
    }

    /**
     * Gets person_count
     *
     * @return int|null
     */
    public function getPersonCount()
    {
        return $this->container['person_count'];
    }

    /**
     * Sets person_count
     *
     * @param int|null $person_count The total number of contacts in the import file.
     *
     * @return self
     */
    public function setPersonCount($person_count)
    {
        if (is_null($person_count)) {
            throw new \InvalidArgumentException('non-nullable person_count cannot be null');
        }
        $this->container['person_count'] = $person_count;

        return $this;
    }

    /**
     * Gets error_count
     *
     * @return int|null
     */
    public function getErrorCount()
    {
        return $this->container['error_count'];
    }

    /**
     * Sets error_count
     *
     * @param int|null $error_count The number of non-correctable errors encountered during the file import.
     *
     * @return self
     */
    public function setErrorCount($error_count)
    {
        if (is_null($error_count)) {
            throw new \InvalidArgumentException('non-nullable error_count cannot be null');
        }
        $this->container['error_count'] = $error_count;

        return $this;
    }

    /**
     * Gets correctable_count
     *
     * @return int|null
     */
    public function getCorrectableCount()
    {
        return $this->container['correctable_count'];
    }

    /**
     * Sets correctable_count
     *
     * @param int|null $correctable_count The number of correctable errors. Correctable errors are: invalid email address format, birthday or anniversary format error, or does not have minimal contact information (no name or email address). Correctable errors are available in the product UI to correct.
     *
     * @return self
     */
    public function setCorrectableCount($correctable_count)
    {
        if (is_null($correctable_count)) {
            throw new \InvalidArgumentException('non-nullable correctable_count cannot be null');
        }
        $this->container['correctable_count'] = $correctable_count;

        return $this;
    }

    /**
     * Gets cannot_add_to_list_count
     *
     * @return int|null
     */
    public function getCannotAddToListCount()
    {
        return $this->container['cannot_add_to_list_count'];
    }

    /**
     * Sets cannot_add_to_list_count
     *
     * @param int|null $cannot_add_to_list_count The number of previously unsubscribed contacts in the import - they cannot be added to a list.
     *
     * @return self
     */
    public function setCannotAddToListCount($cannot_add_to_list_count)
    {
        if (is_null($cannot_add_to_list_count)) {
            throw new \InvalidArgumentException('non-nullable cannot_add_to_list_count cannot be null');
        }
        $this->container['cannot_add_to_list_count'] = $cannot_add_to_list_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


