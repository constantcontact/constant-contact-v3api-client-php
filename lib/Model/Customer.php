<?php
/**
 * Customer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.167
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contact_email' => 'string',
        'contact_phone' => 'string',
        'country_code' => 'string',
        'encoded_account_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'organization_name' => 'string',
        'organization_phone' => 'string',
        'state_code' => 'string',
        'time_zone_id' => 'string',
        'website' => 'string',
        'physical_address' => '\ConstantContactApi\Client\Model\GetAccountDetails200ResponsePhysicalAddress',
        'company_logo' => '\ConstantContactApi\Client\Model\GetAccountDetails200ResponseCompanyLogo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contact_email' => null,
        'contact_phone' => null,
        'country_code' => null,
        'encoded_account_id' => null,
        'first_name' => null,
        'last_name' => null,
        'organization_name' => null,
        'organization_phone' => null,
        'state_code' => null,
        'time_zone_id' => null,
        'website' => null,
        'physical_address' => null,
        'company_logo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contact_email' => false,
        'contact_phone' => false,
        'country_code' => false,
        'encoded_account_id' => false,
        'first_name' => false,
        'last_name' => false,
        'organization_name' => false,
        'organization_phone' => false,
        'state_code' => false,
        'time_zone_id' => false,
        'website' => false,
        'physical_address' => false,
        'company_logo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_email' => 'contact_email',
        'contact_phone' => 'contact_phone',
        'country_code' => 'country_code',
        'encoded_account_id' => 'encoded_account_id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'organization_name' => 'organization_name',
        'organization_phone' => 'organization_phone',
        'state_code' => 'state_code',
        'time_zone_id' => 'time_zone_id',
        'website' => 'website',
        'physical_address' => 'physical_address',
        'company_logo' => 'company_logo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_email' => 'setContactEmail',
        'contact_phone' => 'setContactPhone',
        'country_code' => 'setCountryCode',
        'encoded_account_id' => 'setEncodedAccountId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'organization_name' => 'setOrganizationName',
        'organization_phone' => 'setOrganizationPhone',
        'state_code' => 'setStateCode',
        'time_zone_id' => 'setTimeZoneId',
        'website' => 'setWebsite',
        'physical_address' => 'setPhysicalAddress',
        'company_logo' => 'setCompanyLogo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_email' => 'getContactEmail',
        'contact_phone' => 'getContactPhone',
        'country_code' => 'getCountryCode',
        'encoded_account_id' => 'getEncodedAccountId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'organization_name' => 'getOrganizationName',
        'organization_phone' => 'getOrganizationPhone',
        'state_code' => 'getStateCode',
        'time_zone_id' => 'getTimeZoneId',
        'website' => 'getWebsite',
        'physical_address' => 'getPhysicalAddress',
        'company_logo' => 'getCompanyLogo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contact_email', $data ?? [], null);
        $this->setIfExists('contact_phone', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('encoded_account_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('organization_name', $data ?? [], null);
        $this->setIfExists('organization_phone', $data ?? [], null);
        $this->setIfExists('state_code', $data ?? [], null);
        $this->setIfExists('time_zone_id', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('physical_address', $data ?? [], null);
        $this->setIfExists('company_logo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['contact_phone']) && (mb_strlen($this->container['contact_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'contact_phone', the character length must be smaller than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contact_email
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string|null $contact_email Email addresses that are associated with the Constant Contact account owner.
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        if (is_null($contact_email)) {
            throw new \InvalidArgumentException('non-nullable contact_email cannot be null');
        }
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_phone
     *
     * @return string|null
     */
    public function getContactPhone()
    {
        return $this->container['contact_phone'];
    }

    /**
     * Sets contact_phone
     *
     * @param string|null $contact_phone The account owner's contact phone number (up to 25 characters in length).
     *
     * @return self
     */
    public function setContactPhone($contact_phone)
    {
        if (is_null($contact_phone)) {
            throw new \InvalidArgumentException('non-nullable contact_phone cannot be null');
        }
        if ((mb_strlen($contact_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $contact_phone when calling Customer., must be smaller than or equal to 25.');
        }

        $this->container['contact_phone'] = $contact_phone;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code The uppercase two-letter <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1 code</a> representing the organization's country.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets encoded_account_id
     *
     * @return string|null
     */
    public function getEncodedAccountId()
    {
        return $this->container['encoded_account_id'];
    }

    /**
     * Sets encoded_account_id
     *
     * @param string|null $encoded_account_id The readOnly encoded account ID that uniquely identifies the account.
     *
     * @return self
     */
    public function setEncodedAccountId($encoded_account_id)
    {
        if (is_null($encoded_account_id)) {
            throw new \InvalidArgumentException('non-nullable encoded_account_id cannot be null');
        }
        $this->container['encoded_account_id'] = $encoded_account_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The account owner's first name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The account owner's last name.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string|null
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string|null $organization_name The name of the organization that is associated with this account.
     *
     * @return self
     */
    public function setOrganizationName($organization_name)
    {
        if (is_null($organization_name)) {
            throw new \InvalidArgumentException('non-nullable organization_name cannot be null');
        }
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets organization_phone
     *
     * @return string|null
     */
    public function getOrganizationPhone()
    {
        return $this->container['organization_phone'];
    }

    /**
     * Sets organization_phone
     *
     * @param string|null $organization_phone The phone number of the organization that is associated with this account.
     *
     * @return self
     */
    public function setOrganizationPhone($organization_phone)
    {
        if (is_null($organization_phone)) {
            throw new \InvalidArgumentException('non-nullable organization_phone cannot be null');
        }
        $this->container['organization_phone'] = $organization_phone;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string|null $state_code The uppercase two letter <a href='https://en.wikipedia.org/wiki/ISO_3166-1' target='_blank'>ISO 3166-1 code</a> for the organization's state. This property is required if the <code>country_code</code> is US (United States).
     *
     * @return self
     */
    public function setStateCode($state_code)
    {
        if (is_null($state_code)) {
            throw new \InvalidArgumentException('non-nullable state_code cannot be null');
        }
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets time_zone_id
     *
     * @return string|null
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     *
     * @param string|null $time_zone_id The time zone that is automatically set based on the <code>state_code</code> setting; as defined in the IANA time-zone database (see http://www.iana.org/time-zones).
     *
     * @return self
     */
    public function setTimeZoneId($time_zone_id)
    {
        if (is_null($time_zone_id)) {
            throw new \InvalidArgumentException('non-nullable time_zone_id cannot be null');
        }
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website The organization's website URL.
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets physical_address
     *
     * @return \ConstantContactApi\Client\Model\GetAccountDetails200ResponsePhysicalAddress|null
     */
    public function getPhysicalAddress()
    {
        return $this->container['physical_address'];
    }

    /**
     * Sets physical_address
     *
     * @param \ConstantContactApi\Client\Model\GetAccountDetails200ResponsePhysicalAddress|null $physical_address physical_address
     *
     * @return self
     */
    public function setPhysicalAddress($physical_address)
    {
        if (is_null($physical_address)) {
            throw new \InvalidArgumentException('non-nullable physical_address cannot be null');
        }
        $this->container['physical_address'] = $physical_address;

        return $this;
    }

    /**
     * Gets company_logo
     *
     * @return \ConstantContactApi\Client\Model\GetAccountDetails200ResponseCompanyLogo|null
     */
    public function getCompanyLogo()
    {
        return $this->container['company_logo'];
    }

    /**
     * Sets company_logo
     *
     * @param \ConstantContactApi\Client\Model\GetAccountDetails200ResponseCompanyLogo|null $company_logo company_logo
     *
     * @return self
     */
    public function setCompanyLogo($company_logo)
    {
        if (is_null($company_logo)) {
            throw new \InvalidArgumentException('non-nullable company_logo cannot be null');
        }
        $this->container['company_logo'] = $company_logo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


