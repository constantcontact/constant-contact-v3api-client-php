<?php
/**
 * GetEmailCampaignActivity200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.182
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * GetEmailCampaignActivity200Response Class Doc Comment
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetEmailCampaignActivity200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getEmailCampaignActivity_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'campaign_activity_id' => 'string',
        'campaign_id' => 'string',
        'role' => 'string',
        'contact_list_ids' => 'string[]',
        'segment_ids' => 'int[]',
        'current_status' => 'string',
        'format_type' => 'int',
        'from_email' => 'string',
        'from_name' => 'string',
        'reply_to_email' => 'string',
        'subject' => 'string',
        'html_content' => 'string',
        'template_id' => 'string',
        'permalink_url' => 'string',
        'preheader' => 'string',
        'physical_address_in_footer' => '\ConstantContactApi\Client\Model\GetEmailCampaignActivity200ResponsePhysicalAddressInFooter',
        'document_properties' => '\ConstantContactApi\Client\Model\GetEmailCampaignActivity200ResponseDocumentProperties'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'campaign_activity_id' => null,
        'campaign_id' => null,
        'role' => null,
        'contact_list_ids' => null,
        'segment_ids' => null,
        'current_status' => null,
        'format_type' => 'int32',
        'from_email' => null,
        'from_name' => null,
        'reply_to_email' => null,
        'subject' => null,
        'html_content' => null,
        'template_id' => null,
        'permalink_url' => null,
        'preheader' => null,
        'physical_address_in_footer' => null,
        'document_properties' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'campaign_activity_id' => false,
        'campaign_id' => false,
        'role' => false,
        'contact_list_ids' => false,
        'segment_ids' => false,
        'current_status' => false,
        'format_type' => false,
        'from_email' => false,
        'from_name' => false,
        'reply_to_email' => false,
        'subject' => false,
        'html_content' => false,
        'template_id' => false,
        'permalink_url' => false,
        'preheader' => false,
        'physical_address_in_footer' => false,
        'document_properties' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_activity_id' => 'campaign_activity_id',
        'campaign_id' => 'campaign_id',
        'role' => 'role',
        'contact_list_ids' => 'contact_list_ids',
        'segment_ids' => 'segment_ids',
        'current_status' => 'current_status',
        'format_type' => 'format_type',
        'from_email' => 'from_email',
        'from_name' => 'from_name',
        'reply_to_email' => 'reply_to_email',
        'subject' => 'subject',
        'html_content' => 'html_content',
        'template_id' => 'template_id',
        'permalink_url' => 'permalink_url',
        'preheader' => 'preheader',
        'physical_address_in_footer' => 'physical_address_in_footer',
        'document_properties' => 'document_properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_activity_id' => 'setCampaignActivityId',
        'campaign_id' => 'setCampaignId',
        'role' => 'setRole',
        'contact_list_ids' => 'setContactListIds',
        'segment_ids' => 'setSegmentIds',
        'current_status' => 'setCurrentStatus',
        'format_type' => 'setFormatType',
        'from_email' => 'setFromEmail',
        'from_name' => 'setFromName',
        'reply_to_email' => 'setReplyToEmail',
        'subject' => 'setSubject',
        'html_content' => 'setHtmlContent',
        'template_id' => 'setTemplateId',
        'permalink_url' => 'setPermalinkUrl',
        'preheader' => 'setPreheader',
        'physical_address_in_footer' => 'setPhysicalAddressInFooter',
        'document_properties' => 'setDocumentProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_activity_id' => 'getCampaignActivityId',
        'campaign_id' => 'getCampaignId',
        'role' => 'getRole',
        'contact_list_ids' => 'getContactListIds',
        'segment_ids' => 'getSegmentIds',
        'current_status' => 'getCurrentStatus',
        'format_type' => 'getFormatType',
        'from_email' => 'getFromEmail',
        'from_name' => 'getFromName',
        'reply_to_email' => 'getReplyToEmail',
        'subject' => 'getSubject',
        'html_content' => 'getHtmlContent',
        'template_id' => 'getTemplateId',
        'permalink_url' => 'getPermalinkUrl',
        'preheader' => 'getPreheader',
        'physical_address_in_footer' => 'getPhysicalAddressInFooter',
        'document_properties' => 'getDocumentProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('campaign_activity_id', $data ?? [], null);
        $this->setIfExists('campaign_id', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('contact_list_ids', $data ?? [], null);
        $this->setIfExists('segment_ids', $data ?? [], null);
        $this->setIfExists('current_status', $data ?? [], null);
        $this->setIfExists('format_type', $data ?? [], null);
        $this->setIfExists('from_email', $data ?? [], null);
        $this->setIfExists('from_name', $data ?? [], null);
        $this->setIfExists('reply_to_email', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('html_content', $data ?? [], null);
        $this->setIfExists('template_id', $data ?? [], null);
        $this->setIfExists('permalink_url', $data ?? [], null);
        $this->setIfExists('preheader', $data ?? [], null);
        $this->setIfExists('physical_address_in_footer', $data ?? [], null);
        $this->setIfExists('document_properties', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['from_email'] === null) {
            $invalidProperties[] = "'from_email' can't be null";
        }
        if ($this->container['from_name'] === null) {
            $invalidProperties[] = "'from_name' can't be null";
        }
        if ($this->container['reply_to_email'] === null) {
            $invalidProperties[] = "'reply_to_email' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign_activity_id
     *
     * @return string|null
     */
    public function getCampaignActivityId()
    {
        return $this->container['campaign_activity_id'];
    }

    /**
     * Sets campaign_activity_id
     *
     * @param string|null $campaign_activity_id Identifies a campaign activity in the V3 API.
     *
     * @return self
     */
    public function setCampaignActivityId($campaign_activity_id)
    {
        if (is_null($campaign_activity_id)) {
            throw new \InvalidArgumentException('non-nullable campaign_activity_id cannot be null');
        }
        $this->container['campaign_activity_id'] = $campaign_activity_id;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string|null $campaign_id Identifies a campaign in the V3 API.
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        if (is_null($campaign_id)) {
            throw new \InvalidArgumentException('non-nullable campaign_id cannot be null');
        }
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role The purpose of the individual campaign activity in the larger email campaign effort. Valid values are: <ul>   <li>primary_email — The main email marketing campaign that you send to contacts. The <code>primary_email</code> contains the complete email content.</li>   <li>permalink — A permanent link to a web accessible version of the <code>primary_email</code> content without any personalized email information. For example, permalinks do not contain any of the contact details that you add to the <code>primary_email</code> email content. </li>   <li>resend — An email campaign that you resend to contacts that did not open the email campaign.</li> </ul> Constant Contact creates a <code>primary_email</code> and a <code>permalink</code> role campaign activity when you create an email campaign.
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets contact_list_ids
     *
     * @return string[]|null
     */
    public function getContactListIds()
    {
        return $this->container['contact_list_ids'];
    }

    /**
     * Sets contact_list_ids
     *
     * @param string[]|null $contact_list_ids The contacts that Constant Contact sends the email campaign activity to as an array of contact <code>list_id</code> values. You cannot use contact lists and segments at the same time in an email campaign activity.
     *
     * @return self
     */
    public function setContactListIds($contact_list_ids)
    {
        if (is_null($contact_list_ids)) {
            throw new \InvalidArgumentException('non-nullable contact_list_ids cannot be null');
        }
        $this->container['contact_list_ids'] = $contact_list_ids;

        return $this;
    }

    /**
     * Gets segment_ids
     *
     * @return int[]|null
     */
    public function getSegmentIds()
    {
        return $this->container['segment_ids'];
    }

    /**
     * Sets segment_ids
     *
     * @param int[]|null $segment_ids The contacts that Constant Contact sends the email campaign activity to as an array containing a single <code>segment_id</code> value. Only <code>format_type</code> 3, 4, and 5 email campaign activities support segments. You cannot use contact lists and segments at the same time in an email campaign activity.
     *
     * @return self
     */
    public function setSegmentIds($segment_ids)
    {
        if (is_null($segment_ids)) {
            throw new \InvalidArgumentException('non-nullable segment_ids cannot be null');
        }
        $this->container['segment_ids'] = $segment_ids;

        return $this;
    }

    /**
     * Gets current_status
     *
     * @return string|null
     */
    public function getCurrentStatus()
    {
        return $this->container['current_status'];
    }

    /**
     * Sets current_status
     *
     * @param string|null $current_status The current status of the email campaign activity. Valid values are: <ul>   <li>DRAFT — An email campaign activity that you have created but have not sent to contacts.</li>   <li>SCHEDULED — An email campaign activity that you have scheduled for Constant Contact to send to contacts.</li>   <li>EXECUTING — An email campaign activity Constant Contact is currently sending to contacts. Email campaign activities are only in this status briefly.</li>   <li>DONE — An email campaign activity that you successfully sent to contacts.</li>   <li>ERROR — An email campaign activity that encountered an error.</li>   <li>REMOVED — An email campaign that a user deleted. Users can view and restore deleted emails through the UI.</li> </ul>
     *
     * @return self
     */
    public function setCurrentStatus($current_status)
    {
        if (is_null($current_status)) {
            throw new \InvalidArgumentException('non-nullable current_status cannot be null');
        }
        $this->container['current_status'] = $current_status;

        return $this;
    }

    /**
     * Gets format_type
     *
     * @return int|null
     */
    public function getFormatType()
    {
        return $this->container['format_type'];
    }

    /**
     * Sets format_type
     *
     * @param int|null $format_type Identifies the type of email format. Valid values are: <ul>   <li>1 - A legacy custom code email created using the V2 API, the V3 API, or the legacy UI HTML editor.</li>   <li>2 - An email created using the second generation email editor UI.</li>   <li>3 - An email created using the third generation email editor UI. This email editor features an improved drag and drop UI and mobile responsiveness.</li>   <li>4 - An email created using the fourth generation email editor UI.</li>   <li>5 - A custom code email created using the V3 API or the new UI HTML editor.</li> </ul>
     *
     * @return self
     */
    public function setFormatType($format_type)
    {
        if (is_null($format_type)) {
            throw new \InvalidArgumentException('non-nullable format_type cannot be null');
        }
        $this->container['format_type'] = $format_type;

        return $this;
    }

    /**
     * Gets from_email
     *
     * @return string
     */
    public function getFromEmail()
    {
        return $this->container['from_email'];
    }

    /**
     * Sets from_email
     *
     * @param string $from_email The email \"From Email\" field for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to <code>/account/emails</code> to return a collection of account emails and their confirmation status.
     *
     * @return self
     */
    public function setFromEmail($from_email)
    {
        if (is_null($from_email)) {
            throw new \InvalidArgumentException('non-nullable from_email cannot be null');
        }
        $this->container['from_email'] = $from_email;

        return $this;
    }

    /**
     * Gets from_name
     *
     * @return string
     */
    public function getFromName()
    {
        return $this->container['from_name'];
    }

    /**
     * Sets from_name
     *
     * @param string $from_name The email \"From Name\" field for the email campaign activity.
     *
     * @return self
     */
    public function setFromName($from_name)
    {
        if (is_null($from_name)) {
            throw new \InvalidArgumentException('non-nullable from_name cannot be null');
        }
        $this->container['from_name'] = $from_name;

        return $this;
    }

    /**
     * Gets reply_to_email
     *
     * @return string
     */
    public function getReplyToEmail()
    {
        return $this->container['reply_to_email'];
    }

    /**
     * Sets reply_to_email
     *
     * @param string $reply_to_email The email \"Reply To Email\" field for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to <code>/account/emails</code> to return a collection of account emails and their confirmation status.
     *
     * @return self
     */
    public function setReplyToEmail($reply_to_email)
    {
        if (is_null($reply_to_email)) {
            throw new \InvalidArgumentException('non-nullable reply_to_email cannot be null');
        }
        $this->container['reply_to_email'] = $reply_to_email;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject The email \"Subject\" field for the email campaign activity.
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets html_content
     *
     * @return string|null
     */
    public function getHtmlContent()
    {
        return $this->container['html_content'];
    }

    /**
     * Sets html_content
     *
     * @param string|null $html_content The HTML or XHTML content for the email campaign activity. Only <code>format_type</code> 1 and 5 (legacy custom code emails or modern custom code emails) can contain <code>html_content</code>.
     *
     * @return self
     */
    public function setHtmlContent($html_content)
    {
        if (is_null($html_content)) {
            throw new \InvalidArgumentException('non-nullable html_content cannot be null');
        }
        $this->container['html_content'] = $html_content;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string|null $template_id Identifies the email layout and design template that the email campaign activity is using as a base.
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        if (is_null($template_id)) {
            throw new \InvalidArgumentException('non-nullable template_id cannot be null');
        }
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets permalink_url
     *
     * @return string|null
     */
    public function getPermalinkUrl()
    {
        return $this->container['permalink_url'];
    }

    /**
     * Sets permalink_url
     *
     * @param string|null $permalink_url The permanent link to a web accessible version of the email campaign content without any personalized email information. The permalink URL becomes accessible after you send an email campaign to contacts.
     *
     * @return self
     */
    public function setPermalinkUrl($permalink_url)
    {
        if (is_null($permalink_url)) {
            throw new \InvalidArgumentException('non-nullable permalink_url cannot be null');
        }
        $this->container['permalink_url'] = $permalink_url;

        return $this;
    }

    /**
     * Gets preheader
     *
     * @return string|null
     */
    public function getPreheader()
    {
        return $this->container['preheader'];
    }

    /**
     * Sets preheader
     *
     * @param string|null $preheader The email preheader for the email campaign activity. Only <code>format_type</code> 3, 4, and 5 email campaign activities use the preheader property.
     *
     * @return self
     */
    public function setPreheader($preheader)
    {
        if (is_null($preheader)) {
            throw new \InvalidArgumentException('non-nullable preheader cannot be null');
        }
        $this->container['preheader'] = $preheader;

        return $this;
    }

    /**
     * Gets physical_address_in_footer
     *
     * @return \ConstantContactApi\Client\Model\GetEmailCampaignActivity200ResponsePhysicalAddressInFooter|null
     */
    public function getPhysicalAddressInFooter()
    {
        return $this->container['physical_address_in_footer'];
    }

    /**
     * Sets physical_address_in_footer
     *
     * @param \ConstantContactApi\Client\Model\GetEmailCampaignActivity200ResponsePhysicalAddressInFooter|null $physical_address_in_footer physical_address_in_footer
     *
     * @return self
     */
    public function setPhysicalAddressInFooter($physical_address_in_footer)
    {
        if (is_null($physical_address_in_footer)) {
            throw new \InvalidArgumentException('non-nullable physical_address_in_footer cannot be null');
        }
        $this->container['physical_address_in_footer'] = $physical_address_in_footer;

        return $this;
    }

    /**
     * Gets document_properties
     *
     * @return \ConstantContactApi\Client\Model\GetEmailCampaignActivity200ResponseDocumentProperties|null
     */
    public function getDocumentProperties()
    {
        return $this->container['document_properties'];
    }

    /**
     * Sets document_properties
     *
     * @param \ConstantContactApi\Client\Model\GetEmailCampaignActivity200ResponseDocumentProperties|null $document_properties document_properties
     *
     * @return self
     */
    public function setDocumentProperties($document_properties)
    {
        if (is_null($document_properties)) {
            throw new \InvalidArgumentException('non-nullable document_properties cannot be null');
        }
        $this->container['document_properties'] = $document_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


