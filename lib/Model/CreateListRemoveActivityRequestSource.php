<?php
/**
 * CreateListRemoveActivityRequestSource
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.170
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * CreateListRemoveActivityRequestSource Class Doc Comment
 *
 * @category Class
 * @description Specifies the contacts to remove from your target list(s) using one of several mutually exclusive properties.
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateListRemoveActivityRequestSource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createListRemoveActivity_request_source';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'list_ids' => 'string[]',
        'contact_ids' => 'string[]',
        'all_active_contacts' => 'bool',
        'engagement_level' => 'string',
        'tag_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'list_ids' => 'uuid',
        'contact_ids' => 'uuid',
        'all_active_contacts' => null,
        'engagement_level' => null,
        'tag_ids' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'list_ids' => false,
        'contact_ids' => false,
        'all_active_contacts' => false,
        'engagement_level' => false,
        'tag_ids' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'list_ids' => 'list_ids',
        'contact_ids' => 'contact_ids',
        'all_active_contacts' => 'all_active_contacts',
        'engagement_level' => 'engagement_level',
        'tag_ids' => 'tag_ids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'list_ids' => 'setListIds',
        'contact_ids' => 'setContactIds',
        'all_active_contacts' => 'setAllActiveContacts',
        'engagement_level' => 'setEngagementLevel',
        'tag_ids' => 'setTagIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'list_ids' => 'getListIds',
        'contact_ids' => 'getContactIds',
        'all_active_contacts' => 'getAllActiveContacts',
        'engagement_level' => 'getEngagementLevel',
        'tag_ids' => 'getTagIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('list_ids', $data ?? [], null);
        $this->setIfExists('contact_ids', $data ?? [], null);
        $this->setIfExists('all_active_contacts', $data ?? [], false);
        $this->setIfExists('engagement_level', $data ?? [], null);
        $this->setIfExists('tag_ids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['list_ids']) && (count($this->container['list_ids']) > 0)) {
            $invalidProperties[] = "invalid value for 'list_ids', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['contact_ids']) && (count($this->container['contact_ids']) > 0)) {
            $invalidProperties[] = "invalid value for 'contact_ids', number of items must be less than or equal to 0.";
        }

        if (!is_null($this->container['tag_ids']) && (count($this->container['tag_ids']) > 0)) {
            $invalidProperties[] = "invalid value for 'tag_ids', number of items must be less than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets list_ids
     *
     * @return string[]|null
     */
    public function getListIds()
    {
        return $this->container['list_ids'];
    }

    /**
     * Sets list_ids
     *
     * @param string[]|null $list_ids Include up to 50 <code>list_id</code> values to remove all contact list members from your target list(s). This property is mutually exclusive with all other <code>source</code> properties.
     *
     * @return self
     */
    public function setListIds($list_ids)
    {
        if (is_null($list_ids)) {
            throw new \InvalidArgumentException('non-nullable list_ids cannot be null');
        }

        if ((count($list_ids) > 0)) {
            throw new \InvalidArgumentException('invalid value for $list_ids when calling CreateListRemoveActivityRequestSource., number of items must be less than or equal to 0.');
        }
        $this->container['list_ids'] = $list_ids;

        return $this;
    }

    /**
     * Gets contact_ids
     *
     * @return string[]|null
     */
    public function getContactIds()
    {
        return $this->container['contact_ids'];
    }

    /**
     * Sets contact_ids
     *
     * @param string[]|null $contact_ids Include up to 500 <code>contact_id</code> values to remove the contacts from your target lists. This property is mutually exclusive with all other <code>source</code> properties.
     *
     * @return self
     */
    public function setContactIds($contact_ids)
    {
        if (is_null($contact_ids)) {
            throw new \InvalidArgumentException('non-nullable contact_ids cannot be null');
        }

        if ((count($contact_ids) > 0)) {
            throw new \InvalidArgumentException('invalid value for $contact_ids when calling CreateListRemoveActivityRequestSource., number of items must be less than or equal to 0.');
        }
        $this->container['contact_ids'] = $contact_ids;

        return $this;
    }

    /**
     * Gets all_active_contacts
     *
     * @return bool|null
     */
    public function getAllActiveContacts()
    {
        return $this->container['all_active_contacts'];
    }

    /**
     * Sets all_active_contacts
     *
     * @param bool|null $all_active_contacts Removes all active (billable) contacts from your targeted lists. This property is mutually exclusive with all other <code>source</code> properties.
     *
     * @return self
     */
    public function setAllActiveContacts($all_active_contacts)
    {
        if (is_null($all_active_contacts)) {
            throw new \InvalidArgumentException('non-nullable all_active_contacts cannot be null');
        }
        $this->container['all_active_contacts'] = $all_active_contacts;

        return $this;
    }

    /**
     * Gets engagement_level
     *
     * @return string|null
     */
    public function getEngagementLevel()
    {
        return $this->container['engagement_level'];
    }

    /**
     * Sets engagement_level
     *
     * @param string|null $engagement_level Removes all contacts that meet the selected  <code>engagement_level </code> to your target lists. This property is mutually exclusive with all other <code>source</code> properties.
     *
     * @return self
     */
    public function setEngagementLevel($engagement_level)
    {
        if (is_null($engagement_level)) {
            throw new \InvalidArgumentException('non-nullable engagement_level cannot be null');
        }
        $this->container['engagement_level'] = $engagement_level;

        return $this;
    }

    /**
     * Gets tag_ids
     *
     * @return string[]|null
     */
    public function getTagIds()
    {
        return $this->container['tag_ids'];
    }

    /**
     * Sets tag_ids
     *
     * @param string[]|null $tag_ids Removes all contacts assigned with the specified <code>tag_id</code>s from your target lists. This property is mutually exclusive with all other <code>source</code> properties.
     *
     * @return self
     */
    public function setTagIds($tag_ids)
    {
        if (is_null($tag_ids)) {
            throw new \InvalidArgumentException('non-nullable tag_ids cannot be null');
        }

        if ((count($tag_ids) > 0)) {
            throw new \InvalidArgumentException('invalid value for $tag_ids when calling CreateListRemoveActivityRequestSource., number of items must be less than or equal to 0.');
        }
        $this->container['tag_ids'] = $tag_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


