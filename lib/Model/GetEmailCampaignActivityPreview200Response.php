<?php
/**
 * GetEmailCampaignActivityPreview200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.168
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * GetEmailCampaignActivityPreview200Response Class Doc Comment
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetEmailCampaignActivityPreview200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getEmailCampaignActivityPreview_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'campaign_activity_id' => 'string',
        'from_email' => 'string',
        'from_name' => 'string',
        'preheader' => 'string',
        'preview_html_content' => 'string',
        'preview_text_content' => 'string',
        'reply_to_email' => 'string',
        'subject' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'campaign_activity_id' => null,
        'from_email' => null,
        'from_name' => null,
        'preheader' => null,
        'preview_html_content' => null,
        'preview_text_content' => null,
        'reply_to_email' => null,
        'subject' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'campaign_activity_id' => false,
        'from_email' => false,
        'from_name' => false,
        'preheader' => false,
        'preview_html_content' => false,
        'preview_text_content' => false,
        'reply_to_email' => false,
        'subject' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_activity_id' => 'campaign_activity_id',
        'from_email' => 'from_email',
        'from_name' => 'from_name',
        'preheader' => 'preheader',
        'preview_html_content' => 'preview_html_content',
        'preview_text_content' => 'preview_text_content',
        'reply_to_email' => 'reply_to_email',
        'subject' => 'subject'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_activity_id' => 'setCampaignActivityId',
        'from_email' => 'setFromEmail',
        'from_name' => 'setFromName',
        'preheader' => 'setPreheader',
        'preview_html_content' => 'setPreviewHtmlContent',
        'preview_text_content' => 'setPreviewTextContent',
        'reply_to_email' => 'setReplyToEmail',
        'subject' => 'setSubject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_activity_id' => 'getCampaignActivityId',
        'from_email' => 'getFromEmail',
        'from_name' => 'getFromName',
        'preheader' => 'getPreheader',
        'preview_html_content' => 'getPreviewHtmlContent',
        'preview_text_content' => 'getPreviewTextContent',
        'reply_to_email' => 'getReplyToEmail',
        'subject' => 'getSubject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('campaign_activity_id', $data ?? [], null);
        $this->setIfExists('from_email', $data ?? [], null);
        $this->setIfExists('from_name', $data ?? [], null);
        $this->setIfExists('preheader', $data ?? [], null);
        $this->setIfExists('preview_html_content', $data ?? [], null);
        $this->setIfExists('preview_text_content', $data ?? [], null);
        $this->setIfExists('reply_to_email', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign_activity_id
     *
     * @return string|null
     */
    public function getCampaignActivityId()
    {
        return $this->container['campaign_activity_id'];
    }

    /**
     * Sets campaign_activity_id
     *
     * @param string|null $campaign_activity_id The unique ID for an email campaign activity.
     *
     * @return self
     */
    public function setCampaignActivityId($campaign_activity_id)
    {
        if (is_null($campaign_activity_id)) {
            throw new \InvalidArgumentException('non-nullable campaign_activity_id cannot be null');
        }
        $this->container['campaign_activity_id'] = $campaign_activity_id;

        return $this;
    }

    /**
     * Gets from_email
     *
     * @return string|null
     */
    public function getFromEmail()
    {
        return $this->container['from_email'];
    }

    /**
     * Sets from_email
     *
     * @param string|null $from_email The \"from email\" email header for the email campaign activity.
     *
     * @return self
     */
    public function setFromEmail($from_email)
    {
        if (is_null($from_email)) {
            throw new \InvalidArgumentException('non-nullable from_email cannot be null');
        }
        $this->container['from_email'] = $from_email;

        return $this;
    }

    /**
     * Gets from_name
     *
     * @return string|null
     */
    public function getFromName()
    {
        return $this->container['from_name'];
    }

    /**
     * Sets from_name
     *
     * @param string|null $from_name The \"from name\" email header for the email campaign activity.
     *
     * @return self
     */
    public function setFromName($from_name)
    {
        if (is_null($from_name)) {
            throw new \InvalidArgumentException('non-nullable from_name cannot be null');
        }
        $this->container['from_name'] = $from_name;

        return $this;
    }

    /**
     * Gets preheader
     *
     * @return string|null
     */
    public function getPreheader()
    {
        return $this->container['preheader'];
    }

    /**
     * Sets preheader
     *
     * @param string|null $preheader The email preheader for the email campaign activity. Only <code>format_type</code> 3, 4, and 5 email campaign activities use the preheader property.
     *
     * @return self
     */
    public function setPreheader($preheader)
    {
        if (is_null($preheader)) {
            throw new \InvalidArgumentException('non-nullable preheader cannot be null');
        }
        $this->container['preheader'] = $preheader;

        return $this;
    }

    /**
     * Gets preview_html_content
     *
     * @return string|null
     */
    public function getPreviewHtmlContent()
    {
        return $this->container['preview_html_content'];
    }

    /**
     * Sets preview_html_content
     *
     * @param string|null $preview_html_content An HTML preview of the email campaign activity.
     *
     * @return self
     */
    public function setPreviewHtmlContent($preview_html_content)
    {
        if (is_null($preview_html_content)) {
            throw new \InvalidArgumentException('non-nullable preview_html_content cannot be null');
        }
        $this->container['preview_html_content'] = $preview_html_content;

        return $this;
    }

    /**
     * Gets preview_text_content
     *
     * @return string|null
     */
    public function getPreviewTextContent()
    {
        return $this->container['preview_text_content'];
    }

    /**
     * Sets preview_text_content
     *
     * @param string|null $preview_text_content A plain text preview of the email campaign activity.
     *
     * @return self
     */
    public function setPreviewTextContent($preview_text_content)
    {
        if (is_null($preview_text_content)) {
            throw new \InvalidArgumentException('non-nullable preview_text_content cannot be null');
        }
        $this->container['preview_text_content'] = $preview_text_content;

        return $this;
    }

    /**
     * Gets reply_to_email
     *
     * @return string|null
     */
    public function getReplyToEmail()
    {
        return $this->container['reply_to_email'];
    }

    /**
     * Sets reply_to_email
     *
     * @param string|null $reply_to_email The email \"Reply To Email\" field for the email campaign activity.
     *
     * @return self
     */
    public function setReplyToEmail($reply_to_email)
    {
        if (is_null($reply_to_email)) {
            throw new \InvalidArgumentException('non-nullable reply_to_email cannot be null');
        }
        $this->container['reply_to_email'] = $reply_to_email;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject The email \"Subject\" field for the email campaign activity.
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


