<?php
/**
 * GetContactById200ResponseSmsChannel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.170
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * GetContactById200ResponseSmsChannel Class Doc Comment
 *
 * @category Class
 * @description Includes SMS channel and consent details.
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetContactById200ResponseSmsChannel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getContactById_200_response_sms_channel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sms_channel_id' => 'string',
        'sms_address' => 'string',
        'dial_code' => 'string',
        'country_code' => 'string',
        'update_source' => 'string',
        'create_source' => 'string',
        'sms_channel_consents' => '\ConstantContactApi\Client\Model\GetContactById200ResponseSmsChannelSmsChannelConsentsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sms_channel_id' => 'uuid',
        'sms_address' => null,
        'dial_code' => null,
        'country_code' => null,
        'update_source' => null,
        'create_source' => null,
        'sms_channel_consents' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sms_channel_id' => false,
        'sms_address' => false,
        'dial_code' => false,
        'country_code' => false,
        'update_source' => false,
        'create_source' => false,
        'sms_channel_consents' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sms_channel_id' => 'sms_channel_id',
        'sms_address' => 'sms_address',
        'dial_code' => 'dial_code',
        'country_code' => 'country_code',
        'update_source' => 'update_source',
        'create_source' => 'create_source',
        'sms_channel_consents' => 'sms_channel_consents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sms_channel_id' => 'setSmsChannelId',
        'sms_address' => 'setSmsAddress',
        'dial_code' => 'setDialCode',
        'country_code' => 'setCountryCode',
        'update_source' => 'setUpdateSource',
        'create_source' => 'setCreateSource',
        'sms_channel_consents' => 'setSmsChannelConsents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sms_channel_id' => 'getSmsChannelId',
        'sms_address' => 'getSmsAddress',
        'dial_code' => 'getDialCode',
        'country_code' => 'getCountryCode',
        'update_source' => 'getUpdateSource',
        'create_source' => 'getCreateSource',
        'sms_channel_consents' => 'getSmsChannelConsents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sms_channel_id', $data ?? [], null);
        $this->setIfExists('sms_address', $data ?? [], null);
        $this->setIfExists('dial_code', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('update_source', $data ?? [], null);
        $this->setIfExists('create_source', $data ?? [], null);
        $this->setIfExists('sms_channel_consents', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sms_channel_id
     *
     * @return string|null
     */
    public function getSmsChannelId()
    {
        return $this->container['sms_channel_id'];
    }

    /**
     * Sets sms_channel_id
     *
     * @param string|null $sms_channel_id The unique ID that identifies an SMS channel.
     *
     * @return self
     */
    public function setSmsChannelId($sms_channel_id)
    {
        if (is_null($sms_channel_id)) {
            throw new \InvalidArgumentException('non-nullable sms_channel_id cannot be null');
        }
        $this->container['sms_channel_id'] = $sms_channel_id;

        return $this;
    }

    /**
     * Gets sms_address
     *
     * @return string|null
     */
    public function getSmsAddress()
    {
        return $this->container['sms_address'];
    }

    /**
     * Sets sms_address
     *
     * @param string|null $sms_address The phone number of the SMS-capable phone, which does not include the country code.
     *
     * @return self
     */
    public function setSmsAddress($sms_address)
    {
        if (is_null($sms_address)) {
            throw new \InvalidArgumentException('non-nullable sms_address cannot be null');
        }
        $this->container['sms_address'] = $sms_address;

        return $this;
    }

    /**
     * Gets dial_code
     *
     * @return string|null
     */
    public function getDialCode()
    {
        return $this->container['dial_code'];
    }

    /**
     * Sets dial_code
     *
     * @param string|null $dial_code The dial code used for the SMS-capable phone. For example, the dial code for the United States is <code>1</code>.
     *
     * @return self
     */
    public function setDialCode($dial_code)
    {
        if (is_null($dial_code)) {
            throw new \InvalidArgumentException('non-nullable dial_code cannot be null');
        }
        $this->container['dial_code'] = $dial_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code The two character ISO country code used for the SMS-capable phone. For example, the country code for the United States is <code>US</code>.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets update_source
     *
     * @return string|null
     */
    public function getUpdateSource()
    {
        return $this->container['update_source'];
    }

    /**
     * Sets update_source
     *
     * @param string|null $update_source Identifies who last updated SMS details for the contact. Valid values are Contact or Account
     *
     * @return self
     */
    public function setUpdateSource($update_source)
    {
        if (is_null($update_source)) {
            throw new \InvalidArgumentException('non-nullable update_source cannot be null');
        }
        $this->container['update_source'] = $update_source;

        return $this;
    }

    /**
     * Gets create_source
     *
     * @return string|null
     */
    public function getCreateSource()
    {
        return $this->container['create_source'];
    }

    /**
     * Sets create_source
     *
     * @param string|null $create_source Identifies who added SMS details for the contact. The value is set when you create SMS details for the contact. Valid values are <code>Contact</code> or <code>Account</code>.
     *
     * @return self
     */
    public function setCreateSource($create_source)
    {
        if (is_null($create_source)) {
            throw new \InvalidArgumentException('non-nullable create_source cannot be null');
        }
        $this->container['create_source'] = $create_source;

        return $this;
    }

    /**
     * Gets sms_channel_consents
     *
     * @return \ConstantContactApi\Client\Model\GetContactById200ResponseSmsChannelSmsChannelConsentsInner[]|null
     */
    public function getSmsChannelConsents()
    {
        return $this->container['sms_channel_consents'];
    }

    /**
     * Sets sms_channel_consents
     *
     * @param \ConstantContactApi\Client\Model\GetContactById200ResponseSmsChannelSmsChannelConsentsInner[]|null $sms_channel_consents Identifies SMS channel consent details such as the current permission status for the SMS channel and opt-in date.
     *
     * @return self
     */
    public function setSmsChannelConsents($sms_channel_consents)
    {
        if (is_null($sms_channel_consents)) {
            throw new \InvalidArgumentException('non-nullable sms_channel_consents cannot be null');
        }
        $this->container['sms_channel_consents'] = $sms_channel_consents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


