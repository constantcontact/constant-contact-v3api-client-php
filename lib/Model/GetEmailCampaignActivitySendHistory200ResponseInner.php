<?php
/**
 * GetEmailCampaignActivitySendHistory200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.179
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * GetEmailCampaignActivitySendHistory200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetEmailCampaignActivitySendHistory200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getEmailCampaignActivitySendHistory_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'send_id' => 'int',
        'contact_list_ids' => 'string[]',
        'segment_ids' => 'int[]',
        'count' => 'int',
        'run_date' => '\DateTime',
        'send_status' => 'string',
        'reason_code' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'send_id' => 'int32',
        'contact_list_ids' => null,
        'segment_ids' => 'int64',
        'count' => 'int64',
        'run_date' => 'date-time',
        'send_status' => null,
        'reason_code' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'send_id' => false,
        'contact_list_ids' => false,
        'segment_ids' => false,
        'count' => false,
        'run_date' => false,
        'send_status' => false,
        'reason_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'send_id' => 'send_id',
        'contact_list_ids' => 'contact_list_ids',
        'segment_ids' => 'segment_ids',
        'count' => 'count',
        'run_date' => 'run_date',
        'send_status' => 'send_status',
        'reason_code' => 'reason_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'send_id' => 'setSendId',
        'contact_list_ids' => 'setContactListIds',
        'segment_ids' => 'setSegmentIds',
        'count' => 'setCount',
        'run_date' => 'setRunDate',
        'send_status' => 'setSendStatus',
        'reason_code' => 'setReasonCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'send_id' => 'getSendId',
        'contact_list_ids' => 'getContactListIds',
        'segment_ids' => 'getSegmentIds',
        'count' => 'getCount',
        'run_date' => 'getRunDate',
        'send_status' => 'getSendStatus',
        'reason_code' => 'getReasonCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('send_id', $data ?? [], null);
        $this->setIfExists('contact_list_ids', $data ?? [], null);
        $this->setIfExists('segment_ids', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('run_date', $data ?? [], null);
        $this->setIfExists('send_status', $data ?? [], null);
        $this->setIfExists('reason_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['send_id']) && ($this->container['send_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'send_id', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets send_id
     *
     * @return int|null
     */
    public function getSendId()
    {
        return $this->container['send_id'];
    }

    /**
     * Sets send_id
     *
     * @param int|null $send_id Uniquely identifies each send history object using the number of times that you sent the email campaign activity as a sequence starting at <code>1</code>. For example, when you send a specific email campaign activity twice this method returns an object with a <code>send_id</code> of 1 for the first send and an object with a <code>send_id</code> of 2 for the second send.
     *
     * @return self
     */
    public function setSendId($send_id)
    {
        if (is_null($send_id)) {
            throw new \InvalidArgumentException('non-nullable send_id cannot be null');
        }

        if (($send_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $send_id when calling GetEmailCampaignActivitySendHistory200ResponseInner., must be bigger than or equal to 1.');
        }

        $this->container['send_id'] = $send_id;

        return $this;
    }

    /**
     * Gets contact_list_ids
     *
     * @return string[]|null
     */
    public function getContactListIds()
    {
        return $this->container['contact_list_ids'];
    }

    /**
     * Sets contact_list_ids
     *
     * @param string[]|null $contact_list_ids The contacts lists that Constant Contact sent email campaign activity to as an array of contact <code>list_id</code> strings.
     *
     * @return self
     */
    public function setContactListIds($contact_list_ids)
    {
        if (is_null($contact_list_ids)) {
            throw new \InvalidArgumentException('non-nullable contact_list_ids cannot be null');
        }
        $this->container['contact_list_ids'] = $contact_list_ids;

        return $this;
    }

    /**
     * Gets segment_ids
     *
     * @return int[]|null
     */
    public function getSegmentIds()
    {
        return $this->container['segment_ids'];
    }

    /**
     * Sets segment_ids
     *
     * @param int[]|null $segment_ids The contact segments that Constant Contact sent the email campaign activity to as an array of <code>segment_id</code> integers.
     *
     * @return self
     */
    public function setSegmentIds($segment_ids)
    {
        if (is_null($segment_ids)) {
            throw new \InvalidArgumentException('non-nullable segment_ids cannot be null');
        }
        $this->container['segment_ids'] = $segment_ids;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int|null
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int|null $count The number of contacts that Constant Contact sent this email campaign activity to. This property is specific to each send history object. When you resend an email campaign activity, Constant Contact only sends it to new contacts in the contact lists or segments you are using.
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            throw new \InvalidArgumentException('non-nullable count cannot be null');
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets run_date
     *
     * @return \DateTime|null
     */
    public function getRunDate()
    {
        return $this->container['run_date'];
    }

    /**
     * Sets run_date
     *
     * @param \DateTime|null $run_date The system generated date and time that Constant Contact sent the email campaign activity to contacts in ISO-8601 format.
     *
     * @return self
     */
    public function setRunDate($run_date)
    {
        if (is_null($run_date)) {
            throw new \InvalidArgumentException('non-nullable run_date cannot be null');
        }
        $this->container['run_date'] = $run_date;

        return $this;
    }

    /**
     * Gets send_status
     *
     * @return string|null
     */
    public function getSendStatus()
    {
        return $this->container['send_status'];
    }

    /**
     * Sets send_status
     *
     * @param string|null $send_status The send status for the email campaign activity. Valid values are: <ul>    <li><code>COMPLETED</code>: Constant Contact successfully sent the email campaign activity.</li>   <li><code>ERRORED</code>: Constant Contact encountered an error when sending the email campaign activity.<li> </ul>
     *
     * @return self
     */
    public function setSendStatus($send_status)
    {
        if (is_null($send_status)) {
            throw new \InvalidArgumentException('non-nullable send_status cannot be null');
        }
        $this->container['send_status'] = $send_status;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return int|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param int|null $reason_code The reason why the send attempt completed or encountered an error. This method returns <code>0</code> if Constant Contact successfully sent the email campaign activity to contacts. Possible <code>reason_code</code> values are: <ul>       <li>0 — Constant Contact successfully sent the email to contacts.</li>       <li>1 — An error occurred when sending this email. Try scheduling it again, or contact <a href='http://support.constantcontact.com' target='_blank'>Customer Support</a>.</li>       <li>2 — We were unable to send the email. Please contact our <a href='http://knowledgebase.constantcontact.com/articles/KnowledgeBase/5782-contact-an-account-review-and-deliverability-specialist' target='_blank'>Account Review Team</a> for more information.</li>       <li>3 — This Constant Contact account cannot currently send emails. This can be due to billing or product expiration.</li>       <li>4 — You're not able to send the email to that many contacts. Remove contacts from the contact lists you are using or select a list with fewer contacts.</li>       <li>5 — The email is currently in staging. For more information, see the <a href='http://knowledgebase.constantcontact.com/articles/KnowledgeBase/7402-email-staging' target='_blank>Email Staging Knowledge Base article</a>.</li>       <li>6 — Constant Contact was unable to finish sending this email to all of the contacts on your list. Please contact <a href='http://support.constantcontact.com' target='_blank'>Customer Support</a> for more information.</li>       <li>7 — The email contains invalid images. This can be caused when one or more images in the email are longer available in your image library.</li>       <li>8 — The email contains a link URL that exceeds 1005 characters.</li>       <li>9 — Constant Contact was unable to verify your authenticated Sender address. Please contact <a href='http://support.constantcontact.com' target='_blank'>Customer Support</a> for more information.</li>       <li>10 — Constant Contact was unable to verify your authenticated Sender address. Please contact <a href='http://support.constantcontact.com' target='_blank'>Customer Support</a> for more information.</li>       <li>11 — This Constant Contact account cannot send survey invitations.</li>       <li>12 — Constant Contact attempted to send the email, but there were no eligible contacts to send it to. This can be caused by an invalid contact list, a contact list with no contacts, or a contact list with no new contacts during a resend. This method displays <code>reason_code</code> 12 as a send attempt with a <code>send_status</code> of COMPLETED and a <code>count</code> of 0.</li> </ul>
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        if (is_null($reason_code)) {
            throw new \InvalidArgumentException('non-nullable reason_code cannot be null');
        }
        $this->container['reason_code'] = $reason_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


