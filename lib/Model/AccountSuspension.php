<?php
/**
 * AccountSuspension
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.168
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * AccountSuspension Class Doc Comment
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountSuspension implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountSuspension';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'suspend_plan_id' => 'int',
        'suspend_plan_group_id' => 'int',
        'suspend_date' => '\DateTime',
        'suspend_reason_id' => 'int',
        'suspend_subreason_id' => 'int',
        'suspend_comment' => 'string',
        'suspend_estimated_reactivation_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'suspend_plan_id' => null,
        'suspend_plan_group_id' => null,
        'suspend_date' => 'date-time',
        'suspend_reason_id' => null,
        'suspend_subreason_id' => null,
        'suspend_comment' => null,
        'suspend_estimated_reactivation_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'suspend_plan_id' => false,
        'suspend_plan_group_id' => false,
        'suspend_date' => false,
        'suspend_reason_id' => false,
        'suspend_subreason_id' => false,
        'suspend_comment' => false,
        'suspend_estimated_reactivation_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'suspend_plan_id' => 'suspend_plan_id',
        'suspend_plan_group_id' => 'suspend_plan_group_id',
        'suspend_date' => 'suspend_date',
        'suspend_reason_id' => 'suspend_reason_id',
        'suspend_subreason_id' => 'suspend_subreason_id',
        'suspend_comment' => 'suspend_comment',
        'suspend_estimated_reactivation_date' => 'suspend_estimated_reactivation_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'suspend_plan_id' => 'setSuspendPlanId',
        'suspend_plan_group_id' => 'setSuspendPlanGroupId',
        'suspend_date' => 'setSuspendDate',
        'suspend_reason_id' => 'setSuspendReasonId',
        'suspend_subreason_id' => 'setSuspendSubreasonId',
        'suspend_comment' => 'setSuspendComment',
        'suspend_estimated_reactivation_date' => 'setSuspendEstimatedReactivationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'suspend_plan_id' => 'getSuspendPlanId',
        'suspend_plan_group_id' => 'getSuspendPlanGroupId',
        'suspend_date' => 'getSuspendDate',
        'suspend_reason_id' => 'getSuspendReasonId',
        'suspend_subreason_id' => 'getSuspendSubreasonId',
        'suspend_comment' => 'getSuspendComment',
        'suspend_estimated_reactivation_date' => 'getSuspendEstimatedReactivationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('suspend_plan_id', $data ?? [], null);
        $this->setIfExists('suspend_plan_group_id', $data ?? [], null);
        $this->setIfExists('suspend_date', $data ?? [], null);
        $this->setIfExists('suspend_reason_id', $data ?? [], null);
        $this->setIfExists('suspend_subreason_id', $data ?? [], null);
        $this->setIfExists('suspend_comment', $data ?? [], null);
        $this->setIfExists('suspend_estimated_reactivation_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['suspend_plan_id'] === null) {
            $invalidProperties[] = "'suspend_plan_id' can't be null";
        }
        if ($this->container['suspend_plan_group_id'] === null) {
            $invalidProperties[] = "'suspend_plan_group_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets suspend_plan_id
     *
     * @return int
     */
    public function getSuspendPlanId()
    {
        return $this->container['suspend_plan_id'];
    }

    /**
     * Sets suspend_plan_id
     *
     * @param int $suspend_plan_id Suspended plan group id.
     *
     * @return self
     */
    public function setSuspendPlanId($suspend_plan_id)
    {
        if (is_null($suspend_plan_id)) {
            throw new \InvalidArgumentException('non-nullable suspend_plan_id cannot be null');
        }
        $this->container['suspend_plan_id'] = $suspend_plan_id;

        return $this;
    }

    /**
     * Gets suspend_plan_group_id
     *
     * @return int
     */
    public function getSuspendPlanGroupId()
    {
        return $this->container['suspend_plan_group_id'];
    }

    /**
     * Sets suspend_plan_group_id
     *
     * @param int $suspend_plan_group_id The suspended plan group id.
     *
     * @return self
     */
    public function setSuspendPlanGroupId($suspend_plan_group_id)
    {
        if (is_null($suspend_plan_group_id)) {
            throw new \InvalidArgumentException('non-nullable suspend_plan_group_id cannot be null');
        }
        $this->container['suspend_plan_group_id'] = $suspend_plan_group_id;

        return $this;
    }

    /**
     * Gets suspend_date
     *
     * @return \DateTime|null
     */
    public function getSuspendDate()
    {
        return $this->container['suspend_date'];
    }

    /**
     * Sets suspend_date
     *
     * @param \DateTime|null $suspend_date The date when the customer will start being suspended. If omitted defaults to the current date and time and suspends the account at the next billing cycle.
     *
     * @return self
     */
    public function setSuspendDate($suspend_date)
    {
        if (is_null($suspend_date)) {
            throw new \InvalidArgumentException('non-nullable suspend_date cannot be null');
        }
        $this->container['suspend_date'] = $suspend_date;

        return $this;
    }

    /**
     * Gets suspend_reason_id
     *
     * @return int|null
     */
    public function getSuspendReasonId()
    {
        return $this->container['suspend_reason_id'];
    }

    /**
     * Sets suspend_reason_id
     *
     * @param int|null $suspend_reason_id The reason the customer is suspended.
     *
     * @return self
     */
    public function setSuspendReasonId($suspend_reason_id)
    {
        if (is_null($suspend_reason_id)) {
            throw new \InvalidArgumentException('non-nullable suspend_reason_id cannot be null');
        }
        $this->container['suspend_reason_id'] = $suspend_reason_id;

        return $this;
    }

    /**
     * Gets suspend_subreason_id
     *
     * @return int|null
     */
    public function getSuspendSubreasonId()
    {
        return $this->container['suspend_subreason_id'];
    }

    /**
     * Sets suspend_subreason_id
     *
     * @param int|null $suspend_subreason_id The subreason why the customer is suspended.
     *
     * @return self
     */
    public function setSuspendSubreasonId($suspend_subreason_id)
    {
        if (is_null($suspend_subreason_id)) {
            throw new \InvalidArgumentException('non-nullable suspend_subreason_id cannot be null');
        }
        $this->container['suspend_subreason_id'] = $suspend_subreason_id;

        return $this;
    }

    /**
     * Gets suspend_comment
     *
     * @return string|null
     */
    public function getSuspendComment()
    {
        return $this->container['suspend_comment'];
    }

    /**
     * Sets suspend_comment
     *
     * @param string|null $suspend_comment Comment field for user suspension.
     *
     * @return self
     */
    public function setSuspendComment($suspend_comment)
    {
        if (is_null($suspend_comment)) {
            throw new \InvalidArgumentException('non-nullable suspend_comment cannot be null');
        }
        $this->container['suspend_comment'] = $suspend_comment;

        return $this;
    }

    /**
     * Gets suspend_estimated_reactivation_date
     *
     * @return \DateTime|null
     */
    public function getSuspendEstimatedReactivationDate()
    {
        return $this->container['suspend_estimated_reactivation_date'];
    }

    /**
     * Sets suspend_estimated_reactivation_date
     *
     * @param \DateTime|null $suspend_estimated_reactivation_date Estimated date when the customer will be reactivated.
     *
     * @return self
     */
    public function setSuspendEstimatedReactivationDate($suspend_estimated_reactivation_date)
    {
        if (is_null($suspend_estimated_reactivation_date)) {
            throw new \InvalidArgumentException('non-nullable suspend_estimated_reactivation_date cannot be null');
        }
        $this->container['suspend_estimated_reactivation_date'] = $suspend_estimated_reactivation_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


