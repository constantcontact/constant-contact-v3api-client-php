<?php
/**
 * CreateImportJSONActivityRequestImportDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.169
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Model;

use \ArrayAccess;
use \ConstantContactApi\Client\ObjectSerializer;

/**
 * CreateImportJSONActivityRequestImportDataInner Class Doc Comment
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateImportJSONActivityRequestImportDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createImportJSONActivity_request_import_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'job_title' => 'string',
        'company_name' => 'string',
        'birthday_month' => 'int',
        'birthday_day' => 'int',
        'anniversary' => 'string',
        'phone' => 'string',
        'home_phone' => 'string',
        'work_phone' => 'string',
        'mobile_phone' => 'string',
        'other_phone' => 'string',
        'street' => 'string',
        'street2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'country' => 'string',
        'home_street' => 'string',
        'home_street2' => 'string',
        'home_city' => 'string',
        'home_state' => 'string',
        'home_zip' => 'string',
        'home_country' => 'string',
        'work_street' => 'string',
        'work_street2' => 'string',
        'work_city' => 'string',
        'work_state' => 'string',
        'work_zip' => 'string',
        'work_country' => 'string',
        'other_street' => 'string',
        'other_street2' => 'string',
        'other_city' => 'string',
        'other_state' => 'string',
        'other_zip' => 'string',
        'other_country' => 'string',
        'cfcustom_field_name' => 'string',
        'sms_number' => 'string',
        'sms_consent_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'first_name' => null,
        'last_name' => null,
        'job_title' => null,
        'company_name' => null,
        'birthday_month' => null,
        'birthday_day' => null,
        'anniversary' => null,
        'phone' => null,
        'home_phone' => null,
        'work_phone' => null,
        'mobile_phone' => null,
        'other_phone' => null,
        'street' => null,
        'street2' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'country' => null,
        'home_street' => null,
        'home_street2' => null,
        'home_city' => null,
        'home_state' => null,
        'home_zip' => null,
        'home_country' => null,
        'work_street' => null,
        'work_street2' => null,
        'work_city' => null,
        'work_state' => null,
        'work_zip' => null,
        'work_country' => null,
        'other_street' => null,
        'other_street2' => null,
        'other_city' => null,
        'other_state' => null,
        'other_zip' => null,
        'other_country' => null,
        'cfcustom_field_name' => null,
        'sms_number' => null,
        'sms_consent_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'email' => false,
        'first_name' => false,
        'last_name' => false,
        'job_title' => false,
        'company_name' => false,
        'birthday_month' => false,
        'birthday_day' => false,
        'anniversary' => false,
        'phone' => false,
        'home_phone' => false,
        'work_phone' => false,
        'mobile_phone' => false,
        'other_phone' => false,
        'street' => false,
        'street2' => false,
        'city' => false,
        'state' => false,
        'zip' => false,
        'country' => false,
        'home_street' => false,
        'home_street2' => false,
        'home_city' => false,
        'home_state' => false,
        'home_zip' => false,
        'home_country' => false,
        'work_street' => false,
        'work_street2' => false,
        'work_city' => false,
        'work_state' => false,
        'work_zip' => false,
        'work_country' => false,
        'other_street' => false,
        'other_street2' => false,
        'other_city' => false,
        'other_state' => false,
        'other_zip' => false,
        'other_country' => false,
        'cfcustom_field_name' => false,
        'sms_number' => false,
        'sms_consent_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'job_title' => 'job_title',
        'company_name' => 'company_name',
        'birthday_month' => 'birthday_month',
        'birthday_day' => 'birthday_day',
        'anniversary' => 'anniversary',
        'phone' => 'phone',
        'home_phone' => 'home_phone',
        'work_phone' => 'work_phone',
        'mobile_phone' => 'mobile_phone',
        'other_phone' => 'other_phone',
        'street' => 'street',
        'street2' => 'street2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'country' => 'country',
        'home_street' => 'home_street',
        'home_street2' => 'home_street2',
        'home_city' => 'home_city',
        'home_state' => 'home_state',
        'home_zip' => 'home_zip',
        'home_country' => 'home country',
        'work_street' => 'work_street',
        'work_street2' => 'work_street2',
        'work_city' => 'work_city',
        'work_state' => 'work_state',
        'work_zip' => 'work_zip',
        'work_country' => 'work_country',
        'other_street' => 'other_street',
        'other_street2' => 'other_street2',
        'other_city' => 'other_city',
        'other_state' => 'other_state',
        'other_zip' => 'other_zip',
        'other_country' => 'other_country',
        'cfcustom_field_name' => 'cf:custom_field_name',
        'sms_number' => 'sms_number',
        'sms_consent_date' => 'sms_consent_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'job_title' => 'setJobTitle',
        'company_name' => 'setCompanyName',
        'birthday_month' => 'setBirthdayMonth',
        'birthday_day' => 'setBirthdayDay',
        'anniversary' => 'setAnniversary',
        'phone' => 'setPhone',
        'home_phone' => 'setHomePhone',
        'work_phone' => 'setWorkPhone',
        'mobile_phone' => 'setMobilePhone',
        'other_phone' => 'setOtherPhone',
        'street' => 'setStreet',
        'street2' => 'setStreet2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'home_street' => 'setHomeStreet',
        'home_street2' => 'setHomeStreet2',
        'home_city' => 'setHomeCity',
        'home_state' => 'setHomeState',
        'home_zip' => 'setHomeZip',
        'home_country' => 'setHomeCountry',
        'work_street' => 'setWorkStreet',
        'work_street2' => 'setWorkStreet2',
        'work_city' => 'setWorkCity',
        'work_state' => 'setWorkState',
        'work_zip' => 'setWorkZip',
        'work_country' => 'setWorkCountry',
        'other_street' => 'setOtherStreet',
        'other_street2' => 'setOtherStreet2',
        'other_city' => 'setOtherCity',
        'other_state' => 'setOtherState',
        'other_zip' => 'setOtherZip',
        'other_country' => 'setOtherCountry',
        'cfcustom_field_name' => 'setCfcustomFieldName',
        'sms_number' => 'setSmsNumber',
        'sms_consent_date' => 'setSmsConsentDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'job_title' => 'getJobTitle',
        'company_name' => 'getCompanyName',
        'birthday_month' => 'getBirthdayMonth',
        'birthday_day' => 'getBirthdayDay',
        'anniversary' => 'getAnniversary',
        'phone' => 'getPhone',
        'home_phone' => 'getHomePhone',
        'work_phone' => 'getWorkPhone',
        'mobile_phone' => 'getMobilePhone',
        'other_phone' => 'getOtherPhone',
        'street' => 'getStreet',
        'street2' => 'getStreet2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'home_street' => 'getHomeStreet',
        'home_street2' => 'getHomeStreet2',
        'home_city' => 'getHomeCity',
        'home_state' => 'getHomeState',
        'home_zip' => 'getHomeZip',
        'home_country' => 'getHomeCountry',
        'work_street' => 'getWorkStreet',
        'work_street2' => 'getWorkStreet2',
        'work_city' => 'getWorkCity',
        'work_state' => 'getWorkState',
        'work_zip' => 'getWorkZip',
        'work_country' => 'getWorkCountry',
        'other_street' => 'getOtherStreet',
        'other_street2' => 'getOtherStreet2',
        'other_city' => 'getOtherCity',
        'other_state' => 'getOtherState',
        'other_zip' => 'getOtherZip',
        'other_country' => 'getOtherCountry',
        'cfcustom_field_name' => 'getCfcustomFieldName',
        'sms_number' => 'getSmsNumber',
        'sms_consent_date' => 'getSmsConsentDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('birthday_month', $data ?? [], null);
        $this->setIfExists('birthday_day', $data ?? [], null);
        $this->setIfExists('anniversary', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('home_phone', $data ?? [], null);
        $this->setIfExists('work_phone', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('other_phone', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('street2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('home_street', $data ?? [], null);
        $this->setIfExists('home_street2', $data ?? [], null);
        $this->setIfExists('home_city', $data ?? [], null);
        $this->setIfExists('home_state', $data ?? [], null);
        $this->setIfExists('home_zip', $data ?? [], null);
        $this->setIfExists('home_country', $data ?? [], null);
        $this->setIfExists('work_street', $data ?? [], null);
        $this->setIfExists('work_street2', $data ?? [], null);
        $this->setIfExists('work_city', $data ?? [], null);
        $this->setIfExists('work_state', $data ?? [], null);
        $this->setIfExists('work_zip', $data ?? [], null);
        $this->setIfExists('work_country', $data ?? [], null);
        $this->setIfExists('other_street', $data ?? [], null);
        $this->setIfExists('other_street2', $data ?? [], null);
        $this->setIfExists('other_city', $data ?? [], null);
        $this->setIfExists('other_state', $data ?? [], null);
        $this->setIfExists('other_zip', $data ?? [], null);
        $this->setIfExists('other_country', $data ?? [], null);
        $this->setIfExists('cfcustom_field_name', $data ?? [], null);
        $this->setIfExists('sms_number', $data ?? [], null);
        $this->setIfExists('sms_consent_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 50)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['job_title']) && (mb_strlen($this->container['job_title']) > 50)) {
            $invalidProperties[] = "invalid value for 'job_title', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['home_phone']) && (mb_strlen($this->container['home_phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'home_phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['work_phone']) && (mb_strlen($this->container['work_phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'work_phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other_phone']) && (mb_strlen($this->container['other_phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'other_phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) > 255)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['street2']) && (mb_strlen($this->container['street2']) > 255)) {
            $invalidProperties[] = "invalid value for 'street2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 50)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['zip']) && (mb_strlen($this->container['zip']) > 50)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 50)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['home_street']) && (mb_strlen($this->container['home_street']) > 255)) {
            $invalidProperties[] = "invalid value for 'home_street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['home_street2']) && (mb_strlen($this->container['home_street2']) > 255)) {
            $invalidProperties[] = "invalid value for 'home_street2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['home_city']) && (mb_strlen($this->container['home_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'home_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['home_state']) && (mb_strlen($this->container['home_state']) > 50)) {
            $invalidProperties[] = "invalid value for 'home_state', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['home_zip']) && (mb_strlen($this->container['home_zip']) > 50)) {
            $invalidProperties[] = "invalid value for 'home_zip', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['home_country']) && (mb_strlen($this->container['home_country']) > 50)) {
            $invalidProperties[] = "invalid value for 'home_country', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['work_street']) && (mb_strlen($this->container['work_street']) > 255)) {
            $invalidProperties[] = "invalid value for 'work_street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['work_street2']) && (mb_strlen($this->container['work_street2']) > 255)) {
            $invalidProperties[] = "invalid value for 'work_street2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['work_city']) && (mb_strlen($this->container['work_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'work_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['work_state']) && (mb_strlen($this->container['work_state']) > 50)) {
            $invalidProperties[] = "invalid value for 'work_state', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['work_zip']) && (mb_strlen($this->container['work_zip']) > 50)) {
            $invalidProperties[] = "invalid value for 'work_zip', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['work_country']) && (mb_strlen($this->container['work_country']) > 50)) {
            $invalidProperties[] = "invalid value for 'work_country', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other_street']) && (mb_strlen($this->container['other_street']) > 255)) {
            $invalidProperties[] = "invalid value for 'other_street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['other_street2']) && (mb_strlen($this->container['other_street2']) > 255)) {
            $invalidProperties[] = "invalid value for 'other_street2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['other_city']) && (mb_strlen($this->container['other_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'other_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other_state']) && (mb_strlen($this->container['other_state']) > 50)) {
            $invalidProperties[] = "invalid value for 'other_state', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other_zip']) && (mb_strlen($this->container['other_zip']) > 50)) {
            $invalidProperties[] = "invalid value for 'other_zip', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other_country']) && (mb_strlen($this->container['other_country']) > 50)) {
            $invalidProperties[] = "invalid value for 'other_country', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['cfcustom_field_name']) && (mb_strlen($this->container['cfcustom_field_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'cfcustom_field_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sms_number']) && (mb_strlen($this->container['sms_number']) > 16)) {
            $invalidProperties[] = "invalid value for 'sms_number', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['sms_consent_date']) && (mb_strlen($this->container['sms_consent_date']) > 16)) {
            $invalidProperties[] = "invalid value for 'sms_consent_date', the character length must be smaller than or equal to 16.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the contact. This method identifies each unique contact using their email address. Required if `sms_number` is not specified.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 50)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name of the contact.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name of the contact.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title The job title of the contact.
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            throw new \InvalidArgumentException('non-nullable job_title cannot be null');
        }
        if ((mb_strlen($job_title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $job_title when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name The name of the company where the contact works.
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        if ((mb_strlen($company_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets birthday_month
     *
     * @return int|null
     */
    public function getBirthdayMonth()
    {
        return $this->container['birthday_month'];
    }

    /**
     * Sets birthday_month
     *
     * @param int|null $birthday_month The month value for the contact's birthday. Valid values are from 1 through 12. The <code>birthday_month</code> property is required if you use <code>birthday_day</code>.
     *
     * @return self
     */
    public function setBirthdayMonth($birthday_month)
    {
        if (is_null($birthday_month)) {
            throw new \InvalidArgumentException('non-nullable birthday_month cannot be null');
        }
        $this->container['birthday_month'] = $birthday_month;

        return $this;
    }

    /**
     * Gets birthday_day
     *
     * @return int|null
     */
    public function getBirthdayDay()
    {
        return $this->container['birthday_day'];
    }

    /**
     * Sets birthday_day
     *
     * @param int|null $birthday_day The day value for the contact's birthday. Valid values are from 1 through 31. The <code>birthday_day</code> property is required if you use <code>birthday_month</code>.
     *
     * @return self
     */
    public function setBirthdayDay($birthday_day)
    {
        if (is_null($birthday_day)) {
            throw new \InvalidArgumentException('non-nullable birthday_day cannot be null');
        }
        $this->container['birthday_day'] = $birthday_day;

        return $this;
    }

    /**
     * Gets anniversary
     *
     * @return string|null
     */
    public function getAnniversary()
    {
        return $this->container['anniversary'];
    }

    /**
     * Sets anniversary
     *
     * @param string|null $anniversary The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.
     *
     * @return self
     */
    public function setAnniversary($anniversary)
    {
        if (is_null($anniversary)) {
            throw new \InvalidArgumentException('non-nullable anniversary cannot be null');
        }
        $this->container['anniversary'] = $anniversary;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The primary phone number for the contact. Use this field to add the default kind of phone number to the imported contact's phone number. Default <code>kind</code> is <code>other</code>.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        if ((mb_strlen($phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string|null
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string|null $home_phone The home phone number for the contact.
     *
     * @return self
     */
    public function setHomePhone($home_phone)
    {
        if (is_null($home_phone)) {
            throw new \InvalidArgumentException('non-nullable home_phone cannot be null');
        }
        if ((mb_strlen($home_phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $home_phone when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string|null
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string|null $work_phone The work phone number for the contact.
     *
     * @return self
     */
    public function setWorkPhone($work_phone)
    {
        if (is_null($work_phone)) {
            throw new \InvalidArgumentException('non-nullable work_phone cannot be null');
        }
        if ((mb_strlen($work_phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $work_phone when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone The mobile phone number for the contact.
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        if ((mb_strlen($mobile_phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets other_phone
     *
     * @return string|null
     */
    public function getOtherPhone()
    {
        return $this->container['other_phone'];
    }

    /**
     * Sets other_phone
     *
     * @param string|null $other_phone A phone number for the contact.
     *
     * @return self
     */
    public function setOtherPhone($other_phone)
    {
        if (is_null($other_phone)) {
            throw new \InvalidArgumentException('non-nullable other_phone cannot be null');
        }
        if ((mb_strlen($other_phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other_phone when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['other_phone'] = $other_phone;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street Line one of the primary street address for the contact. Use this field to add the default kind of street to the imported contact's street address. The default <code>kind</code> is <code>home</code>. which maps to the <code>street_addresses</code> array` in the response.
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        if ((mb_strlen($street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $street when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 255.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets street2
     *
     * @return string|null
     */
    public function getStreet2()
    {
        return $this->container['street2'];
    }

    /**
     * Sets street2
     *
     * @param string|null $street2 Line two of the primary street address for the contact. This value is automatically appended to the <code>street</code> value. Use this field to add the default kind for line two of the street address to the imported contact's address. The default <code>kind</code> is <code>other</code>.
     *
     * @return self
     */
    public function setStreet2($street2)
    {
        if (is_null($street2)) {
            throw new \InvalidArgumentException('non-nullable street2 cannot be null');
        }
        if ((mb_strlen($street2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $street2 when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 255.');
        }

        $this->container['street2'] = $street2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The name of the primary city for the contact. Use this field to add the default kind of city to the imported contact's home address. The default <code>kind</code> is <code>home</code>.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The name of the primary state or province for the contact. Use this field to add the default kind of state to the imported contact's home address. The default <code>kind</code> is <code>home</code>.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        if ((mb_strlen($state) > 50)) {
            throw new \InvalidArgumentException('invalid length for $state when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip The zip or postal code associated with the contact's primary address. Use this field to add the default kind of zip to the imported contact's street address. The default <code>kind</code> is <code>home</code>.
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        if ((mb_strlen($zip) > 50)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The name of the primary country where the contact is located. Use this field to add the default kind of country to the imported contact's street address. The default <code>kind</code> is <code>home</code>.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if ((mb_strlen($country) > 50)) {
            throw new \InvalidArgumentException('invalid length for $country when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets home_street
     *
     * @return string|null
     */
    public function getHomeStreet()
    {
        return $this->container['home_street'];
    }

    /**
     * Sets home_street
     *
     * @param string|null $home_street Line one of the home street address for the contact.
     *
     * @return self
     */
    public function setHomeStreet($home_street)
    {
        if (is_null($home_street)) {
            throw new \InvalidArgumentException('non-nullable home_street cannot be null');
        }
        if ((mb_strlen($home_street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $home_street when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 255.');
        }

        $this->container['home_street'] = $home_street;

        return $this;
    }

    /**
     * Gets home_street2
     *
     * @return string|null
     */
    public function getHomeStreet2()
    {
        return $this->container['home_street2'];
    }

    /**
     * Sets home_street2
     *
     * @param string|null $home_street2 Line two of the home street address for the contact. This value is automatically appended to the <code>home_street</code> value.
     *
     * @return self
     */
    public function setHomeStreet2($home_street2)
    {
        if (is_null($home_street2)) {
            throw new \InvalidArgumentException('non-nullable home_street2 cannot be null');
        }
        if ((mb_strlen($home_street2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $home_street2 when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 255.');
        }

        $this->container['home_street2'] = $home_street2;

        return $this;
    }

    /**
     * Gets home_city
     *
     * @return string|null
     */
    public function getHomeCity()
    {
        return $this->container['home_city'];
    }

    /**
     * Sets home_city
     *
     * @param string|null $home_city The name of the city where the contact lives.
     *
     * @return self
     */
    public function setHomeCity($home_city)
    {
        if (is_null($home_city)) {
            throw new \InvalidArgumentException('non-nullable home_city cannot be null');
        }
        if ((mb_strlen($home_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $home_city when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['home_city'] = $home_city;

        return $this;
    }

    /**
     * Gets home_state
     *
     * @return string|null
     */
    public function getHomeState()
    {
        return $this->container['home_state'];
    }

    /**
     * Sets home_state
     *
     * @param string|null $home_state The name of the home state or province where the contact lives.
     *
     * @return self
     */
    public function setHomeState($home_state)
    {
        if (is_null($home_state)) {
            throw new \InvalidArgumentException('non-nullable home_state cannot be null');
        }
        if ((mb_strlen($home_state) > 50)) {
            throw new \InvalidArgumentException('invalid length for $home_state when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['home_state'] = $home_state;

        return $this;
    }

    /**
     * Gets home_zip
     *
     * @return string|null
     */
    public function getHomeZip()
    {
        return $this->container['home_zip'];
    }

    /**
     * Sets home_zip
     *
     * @param string|null $home_zip The zip or postal code associated with the contact's home address.
     *
     * @return self
     */
    public function setHomeZip($home_zip)
    {
        if (is_null($home_zip)) {
            throw new \InvalidArgumentException('non-nullable home_zip cannot be null');
        }
        if ((mb_strlen($home_zip) > 50)) {
            throw new \InvalidArgumentException('invalid length for $home_zip when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['home_zip'] = $home_zip;

        return $this;
    }

    /**
     * Gets home_country
     *
     * @return string|null
     */
    public function getHomeCountry()
    {
        return $this->container['home_country'];
    }

    /**
     * Sets home_country
     *
     * @param string|null $home_country The name of the country where the contact lives.
     *
     * @return self
     */
    public function setHomeCountry($home_country)
    {
        if (is_null($home_country)) {
            throw new \InvalidArgumentException('non-nullable home_country cannot be null');
        }
        if ((mb_strlen($home_country) > 50)) {
            throw new \InvalidArgumentException('invalid length for $home_country when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['home_country'] = $home_country;

        return $this;
    }

    /**
     * Gets work_street
     *
     * @return string|null
     */
    public function getWorkStreet()
    {
        return $this->container['work_street'];
    }

    /**
     * Sets work_street
     *
     * @param string|null $work_street Line one of the work street address for the contact.
     *
     * @return self
     */
    public function setWorkStreet($work_street)
    {
        if (is_null($work_street)) {
            throw new \InvalidArgumentException('non-nullable work_street cannot be null');
        }
        if ((mb_strlen($work_street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $work_street when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 255.');
        }

        $this->container['work_street'] = $work_street;

        return $this;
    }

    /**
     * Gets work_street2
     *
     * @return string|null
     */
    public function getWorkStreet2()
    {
        return $this->container['work_street2'];
    }

    /**
     * Sets work_street2
     *
     * @param string|null $work_street2 Line two of the work street address for the contact. This value is automatically appended to the <code>work_street</code> value.
     *
     * @return self
     */
    public function setWorkStreet2($work_street2)
    {
        if (is_null($work_street2)) {
            throw new \InvalidArgumentException('non-nullable work_street2 cannot be null');
        }
        if ((mb_strlen($work_street2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $work_street2 when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 255.');
        }

        $this->container['work_street2'] = $work_street2;

        return $this;
    }

    /**
     * Gets work_city
     *
     * @return string|null
     */
    public function getWorkCity()
    {
        return $this->container['work_city'];
    }

    /**
     * Sets work_city
     *
     * @param string|null $work_city The name of the city where the contact works.
     *
     * @return self
     */
    public function setWorkCity($work_city)
    {
        if (is_null($work_city)) {
            throw new \InvalidArgumentException('non-nullable work_city cannot be null');
        }
        if ((mb_strlen($work_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $work_city when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['work_city'] = $work_city;

        return $this;
    }

    /**
     * Gets work_state
     *
     * @return string|null
     */
    public function getWorkState()
    {
        return $this->container['work_state'];
    }

    /**
     * Sets work_state
     *
     * @param string|null $work_state The name of the state or province where the contact works.
     *
     * @return self
     */
    public function setWorkState($work_state)
    {
        if (is_null($work_state)) {
            throw new \InvalidArgumentException('non-nullable work_state cannot be null');
        }
        if ((mb_strlen($work_state) > 50)) {
            throw new \InvalidArgumentException('invalid length for $work_state when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['work_state'] = $work_state;

        return $this;
    }

    /**
     * Gets work_zip
     *
     * @return string|null
     */
    public function getWorkZip()
    {
        return $this->container['work_zip'];
    }

    /**
     * Sets work_zip
     *
     * @param string|null $work_zip The zip or postal code associated with the contact's work address.
     *
     * @return self
     */
    public function setWorkZip($work_zip)
    {
        if (is_null($work_zip)) {
            throw new \InvalidArgumentException('non-nullable work_zip cannot be null');
        }
        if ((mb_strlen($work_zip) > 50)) {
            throw new \InvalidArgumentException('invalid length for $work_zip when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['work_zip'] = $work_zip;

        return $this;
    }

    /**
     * Gets work_country
     *
     * @return string|null
     */
    public function getWorkCountry()
    {
        return $this->container['work_country'];
    }

    /**
     * Sets work_country
     *
     * @param string|null $work_country The name of the country where the contact works.
     *
     * @return self
     */
    public function setWorkCountry($work_country)
    {
        if (is_null($work_country)) {
            throw new \InvalidArgumentException('non-nullable work_country cannot be null');
        }
        if ((mb_strlen($work_country) > 50)) {
            throw new \InvalidArgumentException('invalid length for $work_country when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['work_country'] = $work_country;

        return $this;
    }

    /**
     * Gets other_street
     *
     * @return string|null
     */
    public function getOtherStreet()
    {
        return $this->container['other_street'];
    }

    /**
     * Sets other_street
     *
     * @param string|null $other_street Line one of the other street address for the contact.
     *
     * @return self
     */
    public function setOtherStreet($other_street)
    {
        if (is_null($other_street)) {
            throw new \InvalidArgumentException('non-nullable other_street cannot be null');
        }
        if ((mb_strlen($other_street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $other_street when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 255.');
        }

        $this->container['other_street'] = $other_street;

        return $this;
    }

    /**
     * Gets other_street2
     *
     * @return string|null
     */
    public function getOtherStreet2()
    {
        return $this->container['other_street2'];
    }

    /**
     * Sets other_street2
     *
     * @param string|null $other_street2 Line two of the other street address for the contact. This value is automatically appended to the <code>other_street</code> value.
     *
     * @return self
     */
    public function setOtherStreet2($other_street2)
    {
        if (is_null($other_street2)) {
            throw new \InvalidArgumentException('non-nullable other_street2 cannot be null');
        }
        if ((mb_strlen($other_street2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $other_street2 when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 255.');
        }

        $this->container['other_street2'] = $other_street2;

        return $this;
    }

    /**
     * Gets other_city
     *
     * @return string|null
     */
    public function getOtherCity()
    {
        return $this->container['other_city'];
    }

    /**
     * Sets other_city
     *
     * @param string|null $other_city The name of another city where the contact is located.
     *
     * @return self
     */
    public function setOtherCity($other_city)
    {
        if (is_null($other_city)) {
            throw new \InvalidArgumentException('non-nullable other_city cannot be null');
        }
        if ((mb_strlen($other_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other_city when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['other_city'] = $other_city;

        return $this;
    }

    /**
     * Gets other_state
     *
     * @return string|null
     */
    public function getOtherState()
    {
        return $this->container['other_state'];
    }

    /**
     * Sets other_state
     *
     * @param string|null $other_state The name of another state or province where the contact is located.
     *
     * @return self
     */
    public function setOtherState($other_state)
    {
        if (is_null($other_state)) {
            throw new \InvalidArgumentException('non-nullable other_state cannot be null');
        }
        if ((mb_strlen($other_state) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other_state when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['other_state'] = $other_state;

        return $this;
    }

    /**
     * Gets other_zip
     *
     * @return string|null
     */
    public function getOtherZip()
    {
        return $this->container['other_zip'];
    }

    /**
     * Sets other_zip
     *
     * @param string|null $other_zip The zip or postal code associated with the contact's other address.
     *
     * @return self
     */
    public function setOtherZip($other_zip)
    {
        if (is_null($other_zip)) {
            throw new \InvalidArgumentException('non-nullable other_zip cannot be null');
        }
        if ((mb_strlen($other_zip) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other_zip when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['other_zip'] = $other_zip;

        return $this;
    }

    /**
     * Gets other_country
     *
     * @return string|null
     */
    public function getOtherCountry()
    {
        return $this->container['other_country'];
    }

    /**
     * Sets other_country
     *
     * @param string|null $other_country The name of another country where the contact is located.
     *
     * @return self
     */
    public function setOtherCountry($other_country)
    {
        if (is_null($other_country)) {
            throw new \InvalidArgumentException('non-nullable other_country cannot be null');
        }
        if ((mb_strlen($other_country) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other_country when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 50.');
        }

        $this->container['other_country'] = $other_country;

        return $this;
    }

    /**
     * Gets cfcustom_field_name
     *
     * @return string|null
     */
    public function getCfcustomFieldName()
    {
        return $this->container['cfcustom_field_name'];
    }

    /**
     * Sets cfcustom_field_name
     *
     * @param string|null $cfcustom_field_name The name of this property is dynamic based on the custom fields you want to import. Use a key-value pair where the key is an existing custom field name prefixed with <code>cf:</code>, and the value is a custom field string value. For example, if you have a custom field named <code>first_name</code> you can use <code>\"cf:first_name\":\"Joe\"</code>. Each contact can contain up to 25 different custom fields.
     *
     * @return self
     */
    public function setCfcustomFieldName($cfcustom_field_name)
    {
        if (is_null($cfcustom_field_name)) {
            throw new \InvalidArgumentException('non-nullable cfcustom_field_name cannot be null');
        }
        if ((mb_strlen($cfcustom_field_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cfcustom_field_name when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 255.');
        }

        $this->container['cfcustom_field_name'] = $cfcustom_field_name;

        return $this;
    }

    /**
     * Gets sms_number
     *
     * @return string|null
     */
    public function getSmsNumber()
    {
        return $this->container['sms_number'];
    }

    /**
     * Sets sms_number
     *
     * @param string|null $sms_number The US phone number to associate with the contact's SMS-enabled phone. The country code must be valid. Valid formats are <code>1231231234</code> or <code>123-123-1234</code>. Required if `email` is not specified.
     *
     * @return self
     */
    public function setSmsNumber($sms_number)
    {
        if (is_null($sms_number)) {
            throw new \InvalidArgumentException('non-nullable sms_number cannot be null');
        }
        if ((mb_strlen($sms_number) > 16)) {
            throw new \InvalidArgumentException('invalid length for $sms_number when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 16.');
        }

        $this->container['sms_number'] = $sms_number;

        return $this;
    }

    /**
     * Gets sms_consent_date
     *
     * @return string|null
     */
    public function getSmsConsentDate()
    {
        return $this->container['sms_consent_date'];
    }

    /**
     * Sets sms_consent_date
     *
     * @param string|null $sms_consent_date Required if the SMS permission is set to `explicit`. The date that the contact consented to receiving SMS messages. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.
     *
     * @return self
     */
    public function setSmsConsentDate($sms_consent_date)
    {
        if (is_null($sms_consent_date)) {
            throw new \InvalidArgumentException('non-nullable sms_consent_date cannot be null');
        }
        if ((mb_strlen($sms_consent_date) > 16)) {
            throw new \InvalidArgumentException('invalid length for $sms_consent_date when calling CreateImportJSONActivityRequestImportDataInner., must be smaller than or equal to 16.');
        }

        $this->container['sms_consent_date'] = $sms_consent_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


