<?php
/**
 * EmailCampaignsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.169
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ConstantContactApi\Client\ApiException;
use ConstantContactApi\Client\Configuration;
use ConstantContactApi\Client\HeaderSelector;
use ConstantContactApi\Client\ObjectSerializer;

/**
 * EmailCampaignsApi Class Doc Comment
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmailCampaignsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createEmailCampaign' => [
            'application/json',
        ],
        'createResendEmailCampaign' => [
            'application/json',
        ],
        'deleteEmailCampaign' => [
            'application/json',
        ],
        'deleteResendEmailCampaign' => [
            'application/json',
        ],
        'getAllEmailCampaigns' => [
            'application/json',
        ],
        'getEmailCampaignActivity' => [
            'application/json',
        ],
        'getEmailCampaignById' => [
            'application/json',
        ],
        'getEmailCampaignXrefs' => [
            'application/json',
        ],
        'getResendEmailCampaign' => [
            'application/json',
        ],
        'patchEmailCampaignName' => [
            'application/json',
        ],
        'updateEmailCampaignActivity' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createEmailCampaign
     *
     * POST (Create) a New Email Campaign
     *
     * @param  \ConstantContactApi\Client\Model\CreateEmailCampaignRequest $create_email_campaign_request A JSON request body that contains the email content. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaign'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\CreateEmailCampaign200Response
     */
    public function createEmailCampaign($create_email_campaign_request, string $contentType = self::contentTypes['createEmailCampaign'][0])
    {
        list($response) = $this->createEmailCampaignWithHttpInfo($create_email_campaign_request, $contentType);
        return $response;
    }

    /**
     * Operation createEmailCampaignWithHttpInfo
     *
     * POST (Create) a New Email Campaign
     *
     * @param  \ConstantContactApi\Client\Model\CreateEmailCampaignRequest $create_email_campaign_request A JSON request body that contains the email content. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaign'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\CreateEmailCampaign200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailCampaignWithHttpInfo($create_email_campaign_request, string $contentType = self::contentTypes['createEmailCampaign'][0])
    {
        $request = $this->createEmailCampaignRequest($create_email_campaign_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\CreateEmailCampaign200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\CreateEmailCampaign200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEmailCampaignAsync
     *
     * POST (Create) a New Email Campaign
     *
     * @param  \ConstantContactApi\Client\Model\CreateEmailCampaignRequest $create_email_campaign_request A JSON request body that contains the email content. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailCampaignAsync($create_email_campaign_request, string $contentType = self::contentTypes['createEmailCampaign'][0])
    {
        return $this->createEmailCampaignAsyncWithHttpInfo($create_email_campaign_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEmailCampaignAsyncWithHttpInfo
     *
     * POST (Create) a New Email Campaign
     *
     * @param  \ConstantContactApi\Client\Model\CreateEmailCampaignRequest $create_email_campaign_request A JSON request body that contains the email content. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailCampaignAsyncWithHttpInfo($create_email_campaign_request, string $contentType = self::contentTypes['createEmailCampaign'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response';
        $request = $this->createEmailCampaignRequest($create_email_campaign_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEmailCampaign'
     *
     * @param  \ConstantContactApi\Client\Model\CreateEmailCampaignRequest $create_email_campaign_request A JSON request body that contains the email content. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEmailCampaignRequest($create_email_campaign_request, string $contentType = self::contentTypes['createEmailCampaign'][0])
    {

        // verify the required parameter 'create_email_campaign_request' is set
        if ($create_email_campaign_request === null || (is_array($create_email_campaign_request) && count($create_email_campaign_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_email_campaign_request when calling createEmailCampaign'
            );
        }


        $resourcePath = '/emails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_email_campaign_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_email_campaign_request));
            } else {
                $httpBody = $create_email_campaign_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createResendEmailCampaign
     *
     * POST a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  \ConstantContactApi\Client\Model\CreateResendEmailCampaignRequest $create_resend_email_campaign_request A JSON request body that specifies when to resend the campaign activity to non-openers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\CreateResendEmailCampaign201Response
     */
    public function createResendEmailCampaign($campaign_activity_id, $create_resend_email_campaign_request, string $contentType = self::contentTypes['createResendEmailCampaign'][0])
    {
        list($response) = $this->createResendEmailCampaignWithHttpInfo($campaign_activity_id, $create_resend_email_campaign_request, $contentType);
        return $response;
    }

    /**
     * Operation createResendEmailCampaignWithHttpInfo
     *
     * POST a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  \ConstantContactApi\Client\Model\CreateResendEmailCampaignRequest $create_resend_email_campaign_request A JSON request body that specifies when to resend the campaign activity to non-openers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\CreateResendEmailCampaign201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createResendEmailCampaignWithHttpInfo($campaign_activity_id, $create_resend_email_campaign_request, string $contentType = self::contentTypes['createResendEmailCampaign'][0])
    {
        $request = $this->createResendEmailCampaignRequest($campaign_activity_id, $create_resend_email_campaign_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\ConstantContactApi\Client\Model\CreateResendEmailCampaign201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\CreateResendEmailCampaign201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\CreateResendEmailCampaign201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\CreateResendEmailCampaign201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\CreateResendEmailCampaign201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createResendEmailCampaignAsync
     *
     * POST a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  \ConstantContactApi\Client\Model\CreateResendEmailCampaignRequest $create_resend_email_campaign_request A JSON request body that specifies when to resend the campaign activity to non-openers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResendEmailCampaignAsync($campaign_activity_id, $create_resend_email_campaign_request, string $contentType = self::contentTypes['createResendEmailCampaign'][0])
    {
        return $this->createResendEmailCampaignAsyncWithHttpInfo($campaign_activity_id, $create_resend_email_campaign_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createResendEmailCampaignAsyncWithHttpInfo
     *
     * POST a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  \ConstantContactApi\Client\Model\CreateResendEmailCampaignRequest $create_resend_email_campaign_request A JSON request body that specifies when to resend the campaign activity to non-openers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResendEmailCampaignAsyncWithHttpInfo($campaign_activity_id, $create_resend_email_campaign_request, string $contentType = self::contentTypes['createResendEmailCampaign'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\CreateResendEmailCampaign201Response';
        $request = $this->createResendEmailCampaignRequest($campaign_activity_id, $create_resend_email_campaign_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createResendEmailCampaign'
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  \ConstantContactApi\Client\Model\CreateResendEmailCampaignRequest $create_resend_email_campaign_request A JSON request body that specifies when to resend the campaign activity to non-openers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createResendEmailCampaignRequest($campaign_activity_id, $create_resend_email_campaign_request, string $contentType = self::contentTypes['createResendEmailCampaign'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling createResendEmailCampaign'
            );
        }

        // verify the required parameter 'create_resend_email_campaign_request' is set
        if ($create_resend_email_campaign_request === null || (is_array($create_resend_email_campaign_request) && count($create_resend_email_campaign_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_resend_email_campaign_request when calling createResendEmailCampaign'
            );
        }


        $resourcePath = '/emails/activities/{campaign_activity_id}/non_opener_resends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_resend_email_campaign_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_resend_email_campaign_request));
            } else {
                $httpBody = $create_resend_email_campaign_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailCampaign
     *
     * DELETE an Email Campaign
     *
     * @param  string $campaign_id The unique ID for the email campaign you are deleting. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailCampaign'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEmailCampaign($campaign_id, string $contentType = self::contentTypes['deleteEmailCampaign'][0])
    {
        $this->deleteEmailCampaignWithHttpInfo($campaign_id, $contentType);
    }

    /**
     * Operation deleteEmailCampaignWithHttpInfo
     *
     * DELETE an Email Campaign
     *
     * @param  string $campaign_id The unique ID for the email campaign you are deleting. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailCampaign'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailCampaignWithHttpInfo($campaign_id, string $contentType = self::contentTypes['deleteEmailCampaign'][0])
    {
        $request = $this->deleteEmailCampaignRequest($campaign_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailCampaignAsync
     *
     * DELETE an Email Campaign
     *
     * @param  string $campaign_id The unique ID for the email campaign you are deleting. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailCampaignAsync($campaign_id, string $contentType = self::contentTypes['deleteEmailCampaign'][0])
    {
        return $this->deleteEmailCampaignAsyncWithHttpInfo($campaign_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailCampaignAsyncWithHttpInfo
     *
     * DELETE an Email Campaign
     *
     * @param  string $campaign_id The unique ID for the email campaign you are deleting. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailCampaignAsyncWithHttpInfo($campaign_id, string $contentType = self::contentTypes['deleteEmailCampaign'][0])
    {
        $returnType = '';
        $request = $this->deleteEmailCampaignRequest($campaign_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailCampaign'
     *
     * @param  string $campaign_id The unique ID for the email campaign you are deleting. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmailCampaignRequest($campaign_id, string $contentType = self::contentTypes['deleteEmailCampaign'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling deleteEmailCampaign'
            );
        }


        $resourcePath = '/emails/{campaign_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteResendEmailCampaign
     *
     * DELETE a Resend to Non Openers Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $resend_request_id The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteResendEmailCampaign($campaign_activity_id, $resend_request_id, string $contentType = self::contentTypes['deleteResendEmailCampaign'][0])
    {
        $this->deleteResendEmailCampaignWithHttpInfo($campaign_activity_id, $resend_request_id, $contentType);
    }

    /**
     * Operation deleteResendEmailCampaignWithHttpInfo
     *
     * DELETE a Resend to Non Openers Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $resend_request_id The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteResendEmailCampaignWithHttpInfo($campaign_activity_id, $resend_request_id, string $contentType = self::contentTypes['deleteResendEmailCampaign'][0])
    {
        $request = $this->deleteResendEmailCampaignRequest($campaign_activity_id, $resend_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteResendEmailCampaignAsync
     *
     * DELETE a Resend to Non Openers Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $resend_request_id The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteResendEmailCampaignAsync($campaign_activity_id, $resend_request_id, string $contentType = self::contentTypes['deleteResendEmailCampaign'][0])
    {
        return $this->deleteResendEmailCampaignAsyncWithHttpInfo($campaign_activity_id, $resend_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteResendEmailCampaignAsyncWithHttpInfo
     *
     * DELETE a Resend to Non Openers Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $resend_request_id The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteResendEmailCampaignAsyncWithHttpInfo($campaign_activity_id, $resend_request_id, string $contentType = self::contentTypes['deleteResendEmailCampaign'][0])
    {
        $returnType = '';
        $request = $this->deleteResendEmailCampaignRequest($campaign_activity_id, $resend_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteResendEmailCampaign'
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $resend_request_id The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteResendEmailCampaignRequest($campaign_activity_id, $resend_request_id, string $contentType = self::contentTypes['deleteResendEmailCampaign'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling deleteResendEmailCampaign'
            );
        }

        // verify the required parameter 'resend_request_id' is set
        if ($resend_request_id === null || (is_array($resend_request_id) && count($resend_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resend_request_id when calling deleteResendEmailCampaign'
            );
        }


        $resourcePath = '/emails/activities/{campaign_activity_id}/non_opener_resends/{resend_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }
        // path params
        if ($resend_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resend_request_id' . '}',
                ObjectSerializer::toPathValue($resend_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllEmailCampaigns
     *
     * GET a Collection of Email Campaigns
     *
     * @param  int $limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)
     * @param  \DateTime $before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  \DateTime $after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllEmailCampaigns'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetAllEmailCampaigns200Response
     */
    public function getAllEmailCampaigns($limit = 50, $before_date = null, $after_date = null, string $contentType = self::contentTypes['getAllEmailCampaigns'][0])
    {
        list($response) = $this->getAllEmailCampaignsWithHttpInfo($limit, $before_date, $after_date, $contentType);
        return $response;
    }

    /**
     * Operation getAllEmailCampaignsWithHttpInfo
     *
     * GET a Collection of Email Campaigns
     *
     * @param  int $limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)
     * @param  \DateTime $before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  \DateTime $after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllEmailCampaigns'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetAllEmailCampaigns200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllEmailCampaignsWithHttpInfo($limit = 50, $before_date = null, $after_date = null, string $contentType = self::contentTypes['getAllEmailCampaigns'][0])
    {
        $request = $this->getAllEmailCampaignsRequest($limit, $before_date, $after_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetAllEmailCampaigns200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetAllEmailCampaigns200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetAllEmailCampaigns200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetAllEmailCampaigns200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetAllEmailCampaigns200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllEmailCampaignsAsync
     *
     * GET a Collection of Email Campaigns
     *
     * @param  int $limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)
     * @param  \DateTime $before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  \DateTime $after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllEmailCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllEmailCampaignsAsync($limit = 50, $before_date = null, $after_date = null, string $contentType = self::contentTypes['getAllEmailCampaigns'][0])
    {
        return $this->getAllEmailCampaignsAsyncWithHttpInfo($limit, $before_date, $after_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllEmailCampaignsAsyncWithHttpInfo
     *
     * GET a Collection of Email Campaigns
     *
     * @param  int $limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)
     * @param  \DateTime $before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  \DateTime $after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllEmailCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllEmailCampaignsAsyncWithHttpInfo($limit = 50, $before_date = null, $after_date = null, string $contentType = self::contentTypes['getAllEmailCampaigns'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetAllEmailCampaigns200Response';
        $request = $this->getAllEmailCampaignsRequest($limit, $before_date, $after_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllEmailCampaigns'
     *
     * @param  int $limit Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)
     * @param  \DateTime $before_date Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  \DateTime $after_date Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllEmailCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllEmailCampaignsRequest($limit = 50, $before_date = null, $after_date = null, string $contentType = self::contentTypes['getAllEmailCampaigns'][0])
    {





        $resourcePath = '/emails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before_date,
            'before_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after_date,
            'after_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaignActivity
     *
     * GET a Single Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  string $include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivity'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response
     */
    public function getEmailCampaignActivity($campaign_activity_id, $include = null, string $contentType = self::contentTypes['getEmailCampaignActivity'][0])
    {
        list($response) = $this->getEmailCampaignActivityWithHttpInfo($campaign_activity_id, $include, $contentType);
        return $response;
    }

    /**
     * Operation getEmailCampaignActivityWithHttpInfo
     *
     * GET a Single Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  string $include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivity'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignActivityWithHttpInfo($campaign_activity_id, $include = null, string $contentType = self::contentTypes['getEmailCampaignActivity'][0])
    {
        $request = $this->getEmailCampaignActivityRequest($campaign_activity_id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignActivityAsync
     *
     * GET a Single Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  string $include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignActivityAsync($campaign_activity_id, $include = null, string $contentType = self::contentTypes['getEmailCampaignActivity'][0])
    {
        return $this->getEmailCampaignActivityAsyncWithHttpInfo($campaign_activity_id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignActivityAsyncWithHttpInfo
     *
     * GET a Single Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  string $include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignActivityAsyncWithHttpInfo($campaign_activity_id, $include = null, string $contentType = self::contentTypes['getEmailCampaignActivity'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response';
        $request = $this->getEmailCampaignActivityRequest($campaign_activity_id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaignActivity'
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  string $include Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailCampaignActivityRequest($campaign_activity_id, $include = null, string $contentType = self::contentTypes['getEmailCampaignActivity'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getEmailCampaignActivity'
            );
        }



        $resourcePath = '/emails/activities/{campaign_activity_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaignById
     *
     * GET Details About a Single Email Campaign
     *
     * @param  string $campaign_id The ID (UUID format) that uniquely identifies this email campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignById'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\CreateEmailCampaign200Response
     */
    public function getEmailCampaignById($campaign_id, string $contentType = self::contentTypes['getEmailCampaignById'][0])
    {
        list($response) = $this->getEmailCampaignByIdWithHttpInfo($campaign_id, $contentType);
        return $response;
    }

    /**
     * Operation getEmailCampaignByIdWithHttpInfo
     *
     * GET Details About a Single Email Campaign
     *
     * @param  string $campaign_id The ID (UUID format) that uniquely identifies this email campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignById'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\CreateEmailCampaign200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignByIdWithHttpInfo($campaign_id, string $contentType = self::contentTypes['getEmailCampaignById'][0])
    {
        $request = $this->getEmailCampaignByIdRequest($campaign_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\CreateEmailCampaign200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\CreateEmailCampaign200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignByIdAsync
     *
     * GET Details About a Single Email Campaign
     *
     * @param  string $campaign_id The ID (UUID format) that uniquely identifies this email campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignByIdAsync($campaign_id, string $contentType = self::contentTypes['getEmailCampaignById'][0])
    {
        return $this->getEmailCampaignByIdAsyncWithHttpInfo($campaign_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignByIdAsyncWithHttpInfo
     *
     * GET Details About a Single Email Campaign
     *
     * @param  string $campaign_id The ID (UUID format) that uniquely identifies this email campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignByIdAsyncWithHttpInfo($campaign_id, string $contentType = self::contentTypes['getEmailCampaignById'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response';
        $request = $this->getEmailCampaignByIdRequest($campaign_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaignById'
     *
     * @param  string $campaign_id The ID (UUID format) that uniquely identifies this email campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailCampaignByIdRequest($campaign_id, string $contentType = self::contentTypes['getEmailCampaignById'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getEmailCampaignById'
            );
        }


        $resourcePath = '/emails/{campaign_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaignXrefs
     *
     * GET a Collection of V2 and V3 API Email Campaign Identifiers
     *
     * @param  string $v2_email_campaign_ids Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignXrefs'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetEmailCampaignXrefs200Response
     */
    public function getEmailCampaignXrefs($v2_email_campaign_ids, string $contentType = self::contentTypes['getEmailCampaignXrefs'][0])
    {
        list($response) = $this->getEmailCampaignXrefsWithHttpInfo($v2_email_campaign_ids, $contentType);
        return $response;
    }

    /**
     * Operation getEmailCampaignXrefsWithHttpInfo
     *
     * GET a Collection of V2 and V3 API Email Campaign Identifiers
     *
     * @param  string $v2_email_campaign_ids Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignXrefs'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetEmailCampaignXrefs200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignXrefsWithHttpInfo($v2_email_campaign_ids, string $contentType = self::contentTypes['getEmailCampaignXrefs'][0])
    {
        $request = $this->getEmailCampaignXrefsRequest($v2_email_campaign_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetEmailCampaignXrefs200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetEmailCampaignXrefs200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetEmailCampaignXrefs200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetEmailCampaignXrefs200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetEmailCampaignXrefs200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignXrefsAsync
     *
     * GET a Collection of V2 and V3 API Email Campaign Identifiers
     *
     * @param  string $v2_email_campaign_ids Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignXrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignXrefsAsync($v2_email_campaign_ids, string $contentType = self::contentTypes['getEmailCampaignXrefs'][0])
    {
        return $this->getEmailCampaignXrefsAsyncWithHttpInfo($v2_email_campaign_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignXrefsAsyncWithHttpInfo
     *
     * GET a Collection of V2 and V3 API Email Campaign Identifiers
     *
     * @param  string $v2_email_campaign_ids Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignXrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignXrefsAsyncWithHttpInfo($v2_email_campaign_ids, string $contentType = self::contentTypes['getEmailCampaignXrefs'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetEmailCampaignXrefs200Response';
        $request = $this->getEmailCampaignXrefsRequest($v2_email_campaign_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaignXrefs'
     *
     * @param  string $v2_email_campaign_ids Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignXrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailCampaignXrefsRequest($v2_email_campaign_ids, string $contentType = self::contentTypes['getEmailCampaignXrefs'][0])
    {

        // verify the required parameter 'v2_email_campaign_ids' is set
        if ($v2_email_campaign_ids === null || (is_array($v2_email_campaign_ids) && count($v2_email_campaign_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v2_email_campaign_ids when calling getEmailCampaignXrefs'
            );
        }
        

        $resourcePath = '/emails/campaign_id_xrefs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $v2_email_campaign_ids,
            'v2_email_campaign_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResendEmailCampaign
     *
     * GET Details for a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetResendEmailCampaign200ResponseInner[]
     */
    public function getResendEmailCampaign($campaign_activity_id, string $contentType = self::contentTypes['getResendEmailCampaign'][0])
    {
        list($response) = $this->getResendEmailCampaignWithHttpInfo($campaign_activity_id, $contentType);
        return $response;
    }

    /**
     * Operation getResendEmailCampaignWithHttpInfo
     *
     * GET Details for a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetResendEmailCampaign200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getResendEmailCampaignWithHttpInfo($campaign_activity_id, string $contentType = self::contentTypes['getResendEmailCampaign'][0])
    {
        $request = $this->getResendEmailCampaignRequest($campaign_activity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetResendEmailCampaign200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetResendEmailCampaign200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetResendEmailCampaign200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetResendEmailCampaign200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetResendEmailCampaign200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResendEmailCampaignAsync
     *
     * GET Details for a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResendEmailCampaignAsync($campaign_activity_id, string $contentType = self::contentTypes['getResendEmailCampaign'][0])
    {
        return $this->getResendEmailCampaignAsyncWithHttpInfo($campaign_activity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResendEmailCampaignAsyncWithHttpInfo
     *
     * GET Details for a Resend to Non-openers Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResendEmailCampaignAsyncWithHttpInfo($campaign_activity_id, string $contentType = self::contentTypes['getResendEmailCampaign'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetResendEmailCampaign200ResponseInner[]';
        $request = $this->getResendEmailCampaignRequest($campaign_activity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResendEmailCampaign'
     *
     * @param  string $campaign_activity_id The unique ID for the primary email campaign activity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResendEmailCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getResendEmailCampaignRequest($campaign_activity_id, string $contentType = self::contentTypes['getResendEmailCampaign'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getResendEmailCampaign'
            );
        }


        $resourcePath = '/emails/activities/{campaign_activity_id}/non_opener_resends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchEmailCampaignName
     *
     * PATCH (Update) an Email Campaign Name
     *
     * @param  string $campaign_id The unique identifier for an email campaign. (required)
     * @param  \ConstantContactApi\Client\Model\PatchEmailCampaignNameRequest $patch_email_campaign_name_request A JSON payload that contains the new email campaign name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEmailCampaignName'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\CreateEmailCampaign200Response
     */
    public function patchEmailCampaignName($campaign_id, $patch_email_campaign_name_request, string $contentType = self::contentTypes['patchEmailCampaignName'][0])
    {
        list($response) = $this->patchEmailCampaignNameWithHttpInfo($campaign_id, $patch_email_campaign_name_request, $contentType);
        return $response;
    }

    /**
     * Operation patchEmailCampaignNameWithHttpInfo
     *
     * PATCH (Update) an Email Campaign Name
     *
     * @param  string $campaign_id The unique identifier for an email campaign. (required)
     * @param  \ConstantContactApi\Client\Model\PatchEmailCampaignNameRequest $patch_email_campaign_name_request A JSON payload that contains the new email campaign name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEmailCampaignName'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\CreateEmailCampaign200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchEmailCampaignNameWithHttpInfo($campaign_id, $patch_email_campaign_name_request, string $contentType = self::contentTypes['patchEmailCampaignName'][0])
    {
        $request = $this->patchEmailCampaignNameRequest($campaign_id, $patch_email_campaign_name_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\CreateEmailCampaign200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\CreateEmailCampaign200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchEmailCampaignNameAsync
     *
     * PATCH (Update) an Email Campaign Name
     *
     * @param  string $campaign_id The unique identifier for an email campaign. (required)
     * @param  \ConstantContactApi\Client\Model\PatchEmailCampaignNameRequest $patch_email_campaign_name_request A JSON payload that contains the new email campaign name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEmailCampaignName'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchEmailCampaignNameAsync($campaign_id, $patch_email_campaign_name_request, string $contentType = self::contentTypes['patchEmailCampaignName'][0])
    {
        return $this->patchEmailCampaignNameAsyncWithHttpInfo($campaign_id, $patch_email_campaign_name_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchEmailCampaignNameAsyncWithHttpInfo
     *
     * PATCH (Update) an Email Campaign Name
     *
     * @param  string $campaign_id The unique identifier for an email campaign. (required)
     * @param  \ConstantContactApi\Client\Model\PatchEmailCampaignNameRequest $patch_email_campaign_name_request A JSON payload that contains the new email campaign name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEmailCampaignName'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchEmailCampaignNameAsyncWithHttpInfo($campaign_id, $patch_email_campaign_name_request, string $contentType = self::contentTypes['patchEmailCampaignName'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\CreateEmailCampaign200Response';
        $request = $this->patchEmailCampaignNameRequest($campaign_id, $patch_email_campaign_name_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchEmailCampaignName'
     *
     * @param  string $campaign_id The unique identifier for an email campaign. (required)
     * @param  \ConstantContactApi\Client\Model\PatchEmailCampaignNameRequest $patch_email_campaign_name_request A JSON payload that contains the new email campaign name. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEmailCampaignName'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchEmailCampaignNameRequest($campaign_id, $patch_email_campaign_name_request, string $contentType = self::contentTypes['patchEmailCampaignName'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling patchEmailCampaignName'
            );
        }

        // verify the required parameter 'patch_email_campaign_name_request' is set
        if ($patch_email_campaign_name_request === null || (is_array($patch_email_campaign_name_request) && count($patch_email_campaign_name_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patch_email_campaign_name_request when calling patchEmailCampaignName'
            );
        }


        $resourcePath = '/emails/{campaign_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_email_campaign_name_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_email_campaign_name_request));
            } else {
                $httpBody = $patch_email_campaign_name_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailCampaignActivity
     *
     * PUT (Update) An Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the email campaign activity you are updating. (required)
     * @param  \ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response $get_email_campaign_activity200_response A request body payload that contains the complete email campaign activity with your changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaignActivity'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response
     */
    public function updateEmailCampaignActivity($campaign_activity_id, $get_email_campaign_activity200_response, string $contentType = self::contentTypes['updateEmailCampaignActivity'][0])
    {
        list($response) = $this->updateEmailCampaignActivityWithHttpInfo($campaign_activity_id, $get_email_campaign_activity200_response, $contentType);
        return $response;
    }

    /**
     * Operation updateEmailCampaignActivityWithHttpInfo
     *
     * PUT (Update) An Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the email campaign activity you are updating. (required)
     * @param  \ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response $get_email_campaign_activity200_response A request body payload that contains the complete email campaign activity with your changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaignActivity'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailCampaignActivityWithHttpInfo($campaign_activity_id, $get_email_campaign_activity200_response, string $contentType = self::contentTypes['updateEmailCampaignActivity'][0])
    {
        $request = $this->updateEmailCampaignActivityRequest($campaign_activity_id, $get_email_campaign_activity200_response, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailCampaignActivityAsync
     *
     * PUT (Update) An Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the email campaign activity you are updating. (required)
     * @param  \ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response $get_email_campaign_activity200_response A request body payload that contains the complete email campaign activity with your changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaignActivity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCampaignActivityAsync($campaign_activity_id, $get_email_campaign_activity200_response, string $contentType = self::contentTypes['updateEmailCampaignActivity'][0])
    {
        return $this->updateEmailCampaignActivityAsyncWithHttpInfo($campaign_activity_id, $get_email_campaign_activity200_response, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailCampaignActivityAsyncWithHttpInfo
     *
     * PUT (Update) An Email Campaign Activity
     *
     * @param  string $campaign_activity_id The unique ID for the email campaign activity you are updating. (required)
     * @param  \ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response $get_email_campaign_activity200_response A request body payload that contains the complete email campaign activity with your changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaignActivity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCampaignActivityAsyncWithHttpInfo($campaign_activity_id, $get_email_campaign_activity200_response, string $contentType = self::contentTypes['updateEmailCampaignActivity'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response';
        $request = $this->updateEmailCampaignActivityRequest($campaign_activity_id, $get_email_campaign_activity200_response, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailCampaignActivity'
     *
     * @param  string $campaign_activity_id The unique ID for the email campaign activity you are updating. (required)
     * @param  \ConstantContactApi\Client\Model\GetEmailCampaignActivity200Response $get_email_campaign_activity200_response A request body payload that contains the complete email campaign activity with your changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmailCampaignActivity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmailCampaignActivityRequest($campaign_activity_id, $get_email_campaign_activity200_response, string $contentType = self::contentTypes['updateEmailCampaignActivity'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling updateEmailCampaignActivity'
            );
        }

        // verify the required parameter 'get_email_campaign_activity200_response' is set
        if ($get_email_campaign_activity200_response === null || (is_array($get_email_campaign_activity200_response) && count($get_email_campaign_activity200_response) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_email_campaign_activity200_response when calling updateEmailCampaignActivity'
            );
        }


        $resourcePath = '/emails/activities/{campaign_activity_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_email_campaign_activity200_response)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_email_campaign_activity200_response));
            } else {
                $httpBody = $get_email_campaign_activity200_response;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
