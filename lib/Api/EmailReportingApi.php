<?php
/**
 * EmailReportingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.182
 * Contact: webservices@constantcontact.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ConstantContactApi\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ConstantContactApi\Client\ApiException;
use ConstantContactApi\Client\Configuration;
use ConstantContactApi\Client\HeaderSelector;
use ConstantContactApi\Client\ObjectSerializer;

/**
 * EmailReportingApi Class Doc Comment
 *
 * @category Class
 * @package  ConstantContactApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmailReportingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getBouncesReport' => [
            'application/json',
        ],
        'getCampaignActivityLinkReport' => [
            'application/json',
        ],
        'getClicksReport' => [
            'application/json',
        ],
        'getDidNotOpensReport' => [
            'application/json',
        ],
        'getEmailCampaignActivityReport' => [
            'application/json',
        ],
        'getEmailCampaignReport' => [
            'application/json',
        ],
        'getEmailOpensReport' => [
            'application/json',
        ],
        'getEmailSendsReport' => [
            'application/json',
        ],
        'getEmailStatsReport' => [
            'application/json',
        ],
        'getForwardsReport' => [
            'application/json',
        ],
        'getOptoutsReport' => [
            'application/json',
        ],
        'getUniqueOpensReport' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getBouncesReport
     *
     * GET an Email Bounces Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string[] $bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBouncesReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetBouncesReport200Response
     */
    public function getBouncesReport($campaign_activity_id, $bounce_code = null, $limit = '500', string $contentType = self::contentTypes['getBouncesReport'][0])
    {
        list($response) = $this->getBouncesReportWithHttpInfo($campaign_activity_id, $bounce_code, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getBouncesReportWithHttpInfo
     *
     * GET an Email Bounces Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string[] $bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBouncesReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetBouncesReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBouncesReportWithHttpInfo($campaign_activity_id, $bounce_code = null, $limit = '500', string $contentType = self::contentTypes['getBouncesReport'][0])
    {
        $request = $this->getBouncesReportRequest($campaign_activity_id, $bounce_code, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetBouncesReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetBouncesReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetBouncesReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetBouncesReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetBouncesReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBouncesReportAsync
     *
     * GET an Email Bounces Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string[] $bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBouncesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBouncesReportAsync($campaign_activity_id, $bounce_code = null, $limit = '500', string $contentType = self::contentTypes['getBouncesReport'][0])
    {
        return $this->getBouncesReportAsyncWithHttpInfo($campaign_activity_id, $bounce_code, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBouncesReportAsyncWithHttpInfo
     *
     * GET an Email Bounces Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string[] $bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBouncesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBouncesReportAsyncWithHttpInfo($campaign_activity_id, $bounce_code = null, $limit = '500', string $contentType = self::contentTypes['getBouncesReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetBouncesReport200Response';
        $request = $this->getBouncesReportRequest($campaign_activity_id, $bounce_code, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBouncesReport'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string[] $bounce_code To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBouncesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBouncesReportRequest($campaign_activity_id, $bounce_code = null, $limit = '500', string $contentType = self::contentTypes['getBouncesReport'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getBouncesReport'
            );
        }


        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/bounces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bounce_code,
            'bounce_code', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignActivityLinkReport
     *
     * GET an Email Links Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  bool $no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignActivityLinkReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetCampaignActivityLinkReport200Response
     */
    public function getCampaignActivityLinkReport($campaign_activity_id, $no_clicks = false, string $contentType = self::contentTypes['getCampaignActivityLinkReport'][0])
    {
        list($response) = $this->getCampaignActivityLinkReportWithHttpInfo($campaign_activity_id, $no_clicks, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignActivityLinkReportWithHttpInfo
     *
     * GET an Email Links Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  bool $no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignActivityLinkReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetCampaignActivityLinkReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignActivityLinkReportWithHttpInfo($campaign_activity_id, $no_clicks = false, string $contentType = self::contentTypes['getCampaignActivityLinkReport'][0])
    {
        $request = $this->getCampaignActivityLinkReportRequest($campaign_activity_id, $no_clicks, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetCampaignActivityLinkReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetCampaignActivityLinkReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetCampaignActivityLinkReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetCampaignActivityLinkReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetCampaignActivityLinkReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignActivityLinkReportAsync
     *
     * GET an Email Links Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  bool $no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignActivityLinkReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignActivityLinkReportAsync($campaign_activity_id, $no_clicks = false, string $contentType = self::contentTypes['getCampaignActivityLinkReport'][0])
    {
        return $this->getCampaignActivityLinkReportAsyncWithHttpInfo($campaign_activity_id, $no_clicks, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignActivityLinkReportAsyncWithHttpInfo
     *
     * GET an Email Links Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  bool $no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignActivityLinkReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignActivityLinkReportAsyncWithHttpInfo($campaign_activity_id, $no_clicks = false, string $contentType = self::contentTypes['getCampaignActivityLinkReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetCampaignActivityLinkReport200Response';
        $request = $this->getCampaignActivityLinkReportRequest($campaign_activity_id, $no_clicks, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignActivityLinkReport'
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity. (required)
     * @param  bool $no_clicks Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignActivityLinkReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignActivityLinkReportRequest($campaign_activity_id, $no_clicks = false, string $contentType = self::contentTypes['getCampaignActivityLinkReport'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getCampaignActivityLinkReport'
            );
        }



        $resourcePath = '/reports/email_reports/{campaign_activity_id}/links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $no_clicks,
            'no_clicks', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClicksReport
     *
     * GET an Email Clicks Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  int $url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClicksReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetClicksReport200Response
     */
    public function getClicksReport($campaign_activity_id, $url_id = null, $limit = '500', string $contentType = self::contentTypes['getClicksReport'][0])
    {
        list($response) = $this->getClicksReportWithHttpInfo($campaign_activity_id, $url_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getClicksReportWithHttpInfo
     *
     * GET an Email Clicks Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  int $url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClicksReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetClicksReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClicksReportWithHttpInfo($campaign_activity_id, $url_id = null, $limit = '500', string $contentType = self::contentTypes['getClicksReport'][0])
    {
        $request = $this->getClicksReportRequest($campaign_activity_id, $url_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetClicksReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetClicksReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetClicksReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetClicksReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetClicksReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClicksReportAsync
     *
     * GET an Email Clicks Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  int $url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClicksReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClicksReportAsync($campaign_activity_id, $url_id = null, $limit = '500', string $contentType = self::contentTypes['getClicksReport'][0])
    {
        return $this->getClicksReportAsyncWithHttpInfo($campaign_activity_id, $url_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClicksReportAsyncWithHttpInfo
     *
     * GET an Email Clicks Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  int $url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClicksReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClicksReportAsyncWithHttpInfo($campaign_activity_id, $url_id = null, $limit = '500', string $contentType = self::contentTypes['getClicksReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetClicksReport200Response';
        $request = $this->getClicksReportRequest($campaign_activity_id, $url_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClicksReport'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  int $url_id The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClicksReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClicksReportRequest($campaign_activity_id, $url_id = null, $limit = '500', string $contentType = self::contentTypes['getClicksReport'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getClicksReport'
            );
        }


        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/clicks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url_id,
            'url_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDidNotOpensReport
     *
     * GET an Email Did Not Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDidNotOpensReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetDidNotOpensReport200Response
     */
    public function getDidNotOpensReport($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getDidNotOpensReport'][0])
    {
        list($response) = $this->getDidNotOpensReportWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getDidNotOpensReportWithHttpInfo
     *
     * GET an Email Did Not Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDidNotOpensReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetDidNotOpensReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDidNotOpensReportWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getDidNotOpensReport'][0])
    {
        $request = $this->getDidNotOpensReportRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetDidNotOpensReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetDidNotOpensReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetDidNotOpensReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetDidNotOpensReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetDidNotOpensReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDidNotOpensReportAsync
     *
     * GET an Email Did Not Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDidNotOpensReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDidNotOpensReportAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getDidNotOpensReport'][0])
    {
        return $this->getDidNotOpensReportAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDidNotOpensReportAsyncWithHttpInfo
     *
     * GET an Email Did Not Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDidNotOpensReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDidNotOpensReportAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getDidNotOpensReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetDidNotOpensReport200Response';
        $request = $this->getDidNotOpensReportRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDidNotOpensReport'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDidNotOpensReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDidNotOpensReportRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getDidNotOpensReport'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getDidNotOpensReport'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/didnotopens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaignActivityReport
     *
     * GET an Email Campaign Activity Stats Report
     *
     * @param  string $campaign_activity_ids A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivityReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetEmailCampaignActivityReport200Response
     */
    public function getEmailCampaignActivityReport($campaign_activity_ids, string $contentType = self::contentTypes['getEmailCampaignActivityReport'][0])
    {
        list($response) = $this->getEmailCampaignActivityReportWithHttpInfo($campaign_activity_ids, $contentType);
        return $response;
    }

    /**
     * Operation getEmailCampaignActivityReportWithHttpInfo
     *
     * GET an Email Campaign Activity Stats Report
     *
     * @param  string $campaign_activity_ids A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivityReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetEmailCampaignActivityReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignActivityReportWithHttpInfo($campaign_activity_ids, string $contentType = self::contentTypes['getEmailCampaignActivityReport'][0])
    {
        $request = $this->getEmailCampaignActivityReportRequest($campaign_activity_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetEmailCampaignActivityReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetEmailCampaignActivityReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetEmailCampaignActivityReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetEmailCampaignActivityReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetEmailCampaignActivityReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignActivityReportAsync
     *
     * GET an Email Campaign Activity Stats Report
     *
     * @param  string $campaign_activity_ids A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivityReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignActivityReportAsync($campaign_activity_ids, string $contentType = self::contentTypes['getEmailCampaignActivityReport'][0])
    {
        return $this->getEmailCampaignActivityReportAsyncWithHttpInfo($campaign_activity_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignActivityReportAsyncWithHttpInfo
     *
     * GET an Email Campaign Activity Stats Report
     *
     * @param  string $campaign_activity_ids A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivityReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignActivityReportAsyncWithHttpInfo($campaign_activity_ids, string $contentType = self::contentTypes['getEmailCampaignActivityReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetEmailCampaignActivityReport200Response';
        $request = $this->getEmailCampaignActivityReportRequest($campaign_activity_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaignActivityReport'
     *
     * @param  string $campaign_activity_ids A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignActivityReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailCampaignActivityReportRequest($campaign_activity_ids, string $contentType = self::contentTypes['getEmailCampaignActivityReport'][0])
    {

        // verify the required parameter 'campaign_activity_ids' is set
        if ($campaign_activity_ids === null || (is_array($campaign_activity_ids) && count($campaign_activity_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_ids when calling getEmailCampaignActivityReport'
            );
        }
        

        $resourcePath = '/reports/stats/email_campaign_activities/{campaign_activity_ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_activity_ids !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_ids' . '}',
                ObjectSerializer::toPathValue($campaign_activity_ids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaignReport
     *
     * GET an Email Campaigns Summary Report
     *
     * @param  string $limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to '50')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetEmailCampaignReport200Response
     */
    public function getEmailCampaignReport($limit = '50', string $contentType = self::contentTypes['getEmailCampaignReport'][0])
    {
        list($response) = $this->getEmailCampaignReportWithHttpInfo($limit, $contentType);
        return $response;
    }

    /**
     * Operation getEmailCampaignReportWithHttpInfo
     *
     * GET an Email Campaigns Summary Report
     *
     * @param  string $limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to '50')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetEmailCampaignReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignReportWithHttpInfo($limit = '50', string $contentType = self::contentTypes['getEmailCampaignReport'][0])
    {
        $request = $this->getEmailCampaignReportRequest($limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetEmailCampaignReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetEmailCampaignReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetEmailCampaignReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetEmailCampaignReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetEmailCampaignReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignReportAsync
     *
     * GET an Email Campaigns Summary Report
     *
     * @param  string $limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to '50')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignReportAsync($limit = '50', string $contentType = self::contentTypes['getEmailCampaignReport'][0])
    {
        return $this->getEmailCampaignReportAsyncWithHttpInfo($limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignReportAsyncWithHttpInfo
     *
     * GET an Email Campaigns Summary Report
     *
     * @param  string $limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to '50')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignReportAsyncWithHttpInfo($limit = '50', string $contentType = self::contentTypes['getEmailCampaignReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetEmailCampaignReport200Response';
        $request = $this->getEmailCampaignReportRequest($limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaignReport'
     *
     * @param  string $limit Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to '50')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailCampaignReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailCampaignReportRequest($limit = '50', string $contentType = self::contentTypes['getEmailCampaignReport'][0])
    {



        $resourcePath = '/reports/summary_reports/email_campaign_summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailOpensReport
     *
     * GET an Email Opens Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailOpensReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetEmailOpensReport200Response
     */
    public function getEmailOpensReport($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getEmailOpensReport'][0])
    {
        list($response) = $this->getEmailOpensReportWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getEmailOpensReportWithHttpInfo
     *
     * GET an Email Opens Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailOpensReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetEmailOpensReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailOpensReportWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getEmailOpensReport'][0])
    {
        $request = $this->getEmailOpensReportRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetEmailOpensReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetEmailOpensReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetEmailOpensReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetEmailOpensReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetEmailOpensReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailOpensReportAsync
     *
     * GET an Email Opens Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailOpensReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailOpensReportAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getEmailOpensReport'][0])
    {
        return $this->getEmailOpensReportAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailOpensReportAsyncWithHttpInfo
     *
     * GET an Email Opens Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailOpensReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailOpensReportAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getEmailOpensReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetEmailOpensReport200Response';
        $request = $this->getEmailOpensReportRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailOpensReport'
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailOpensReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailOpensReportRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getEmailOpensReport'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getEmailOpensReport'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/opens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSendsReport
     *
     * GET an Email Sends Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailSendsReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetEmailSendsReport200Response
     */
    public function getEmailSendsReport($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getEmailSendsReport'][0])
    {
        list($response) = $this->getEmailSendsReportWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getEmailSendsReportWithHttpInfo
     *
     * GET an Email Sends Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailSendsReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetEmailSendsReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSendsReportWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getEmailSendsReport'][0])
    {
        $request = $this->getEmailSendsReportRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetEmailSendsReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetEmailSendsReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetEmailSendsReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetEmailSendsReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetEmailSendsReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSendsReportAsync
     *
     * GET an Email Sends Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailSendsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSendsReportAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getEmailSendsReport'][0])
    {
        return $this->getEmailSendsReportAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSendsReportAsyncWithHttpInfo
     *
     * GET an Email Sends Report
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailSendsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSendsReportAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getEmailSendsReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetEmailSendsReport200Response';
        $request = $this->getEmailSendsReportRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSendsReport'
     *
     * @param  string $campaign_activity_id The unique ID for an email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailSendsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailSendsReportRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getEmailSendsReport'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getEmailSendsReport'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/sends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailStatsReport
     *
     * GET an Email Campaign Stats Report
     *
     * @param  string $campaign_ids A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailStatsReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetEmailStatsReport200Response
     */
    public function getEmailStatsReport($campaign_ids, string $contentType = self::contentTypes['getEmailStatsReport'][0])
    {
        list($response) = $this->getEmailStatsReportWithHttpInfo($campaign_ids, $contentType);
        return $response;
    }

    /**
     * Operation getEmailStatsReportWithHttpInfo
     *
     * GET an Email Campaign Stats Report
     *
     * @param  string $campaign_ids A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailStatsReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetEmailStatsReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailStatsReportWithHttpInfo($campaign_ids, string $contentType = self::contentTypes['getEmailStatsReport'][0])
    {
        $request = $this->getEmailStatsReportRequest($campaign_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetEmailStatsReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetEmailStatsReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetEmailStatsReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetEmailStatsReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetEmailStatsReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailStatsReportAsync
     *
     * GET an Email Campaign Stats Report
     *
     * @param  string $campaign_ids A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailStatsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailStatsReportAsync($campaign_ids, string $contentType = self::contentTypes['getEmailStatsReport'][0])
    {
        return $this->getEmailStatsReportAsyncWithHttpInfo($campaign_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailStatsReportAsyncWithHttpInfo
     *
     * GET an Email Campaign Stats Report
     *
     * @param  string $campaign_ids A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailStatsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailStatsReportAsyncWithHttpInfo($campaign_ids, string $contentType = self::contentTypes['getEmailStatsReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetEmailStatsReport200Response';
        $request = $this->getEmailStatsReportRequest($campaign_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailStatsReport'
     *
     * @param  string $campaign_ids A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailStatsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailStatsReportRequest($campaign_ids, string $contentType = self::contentTypes['getEmailStatsReport'][0])
    {

        // verify the required parameter 'campaign_ids' is set
        if ($campaign_ids === null || (is_array($campaign_ids) && count($campaign_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_ids when calling getEmailStatsReport'
            );
        }
        

        $resourcePath = '/reports/stats/email_campaigns/{campaign_ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_ids !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_ids' . '}',
                ObjectSerializer::toPathValue($campaign_ids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getForwardsReport
     *
     * GET an Email Forwards Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForwardsReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetForwardsReport200Response
     */
    public function getForwardsReport($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getForwardsReport'][0])
    {
        list($response) = $this->getForwardsReportWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getForwardsReportWithHttpInfo
     *
     * GET an Email Forwards Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForwardsReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetForwardsReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getForwardsReportWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getForwardsReport'][0])
    {
        $request = $this->getForwardsReportRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetForwardsReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetForwardsReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetForwardsReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetForwardsReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetForwardsReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getForwardsReportAsync
     *
     * GET an Email Forwards Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForwardsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getForwardsReportAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getForwardsReport'][0])
    {
        return $this->getForwardsReportAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getForwardsReportAsyncWithHttpInfo
     *
     * GET an Email Forwards Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForwardsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getForwardsReportAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getForwardsReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetForwardsReport200Response';
        $request = $this->getForwardsReportRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getForwardsReport'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForwardsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getForwardsReportRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getForwardsReport'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getForwardsReport'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/forwards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOptoutsReport
     *
     * GET an Email Opt-outs Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptoutsReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetOptoutsReport200Response
     */
    public function getOptoutsReport($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOptoutsReport'][0])
    {
        list($response) = $this->getOptoutsReportWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getOptoutsReportWithHttpInfo
     *
     * GET an Email Opt-outs Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptoutsReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetOptoutsReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOptoutsReportWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOptoutsReport'][0])
    {
        $request = $this->getOptoutsReportRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetOptoutsReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetOptoutsReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetOptoutsReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetOptoutsReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetOptoutsReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOptoutsReportAsync
     *
     * GET an Email Opt-outs Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptoutsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOptoutsReportAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOptoutsReport'][0])
    {
        return $this->getOptoutsReportAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOptoutsReportAsyncWithHttpInfo
     *
     * GET an Email Opt-outs Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptoutsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOptoutsReportAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOptoutsReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetOptoutsReport200Response';
        $request = $this->getOptoutsReportRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOptoutsReport'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOptoutsReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOptoutsReportRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getOptoutsReport'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getOptoutsReport'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/optouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniqueOpensReport
     *
     * GET an Email Unique Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueOpensReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ConstantContactApi\Client\Model\GetEmailOpensReport200Response
     */
    public function getUniqueOpensReport($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getUniqueOpensReport'][0])
    {
        list($response) = $this->getUniqueOpensReportWithHttpInfo($campaign_activity_id, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getUniqueOpensReportWithHttpInfo
     *
     * GET an Email Unique Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueOpensReport'] to see the possible values for this operation
     *
     * @throws \ConstantContactApi\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ConstantContactApi\Client\Model\GetEmailOpensReport200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniqueOpensReportWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getUniqueOpensReport'][0])
    {
        $request = $this->getUniqueOpensReportRequest($campaign_activity_id, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ConstantContactApi\Client\Model\GetEmailOpensReport200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ConstantContactApi\Client\Model\GetEmailOpensReport200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ConstantContactApi\Client\Model\GetEmailOpensReport200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ConstantContactApi\Client\Model\GetEmailOpensReport200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ConstantContactApi\Client\Model\GetEmailOpensReport200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUniqueOpensReportAsync
     *
     * GET an Email Unique Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueOpensReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniqueOpensReportAsync($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getUniqueOpensReport'][0])
    {
        return $this->getUniqueOpensReportAsyncWithHttpInfo($campaign_activity_id, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniqueOpensReportAsyncWithHttpInfo
     *
     * GET an Email Unique Opens Report
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueOpensReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniqueOpensReportAsyncWithHttpInfo($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getUniqueOpensReport'][0])
    {
        $returnType = '\ConstantContactApi\Client\Model\GetEmailOpensReport200Response';
        $request = $this->getUniqueOpensReportRequest($campaign_activity_id, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniqueOpensReport'
     *
     * @param  string $campaign_activity_id The ID that uniquely identifies the email campaign activity to use for this report. (required)
     * @param  string $limit The number of tracking activities to return on a page. (optional, default to '500')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueOpensReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniqueOpensReportRequest($campaign_activity_id, $limit = '500', string $contentType = self::contentTypes['getUniqueOpensReport'][0])
    {

        // verify the required parameter 'campaign_activity_id' is set
        if ($campaign_activity_id === null || (is_array($campaign_activity_id) && count($campaign_activity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_activity_id when calling getUniqueOpensReport'
            );
        }

        

        $resourcePath = '/reports/email_reports/{campaign_activity_id}/tracking/unique_opens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_activity_id' . '}',
                ObjectSerializer::toPathValue($campaign_activity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
